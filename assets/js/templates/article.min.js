(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const LocalStore = require('./local.store')
const store = new LocalStore()

// -- comment-review
//    display unpublished comments
//    saved in localStorage,
//    allow to remove unwanted ones,
//    edit them, and then selectively
//    publish them all in one go

function commentReviewList(article_slug) {

  // -- init, view reset
  const comment_data = document.querySelector('.comment-data')

  // remove every node inside comment-data
  Array.from(comment_data.childNodes).map(item => {
    item.remove()
  })
 
  // -- populate comment-data w/ unpublished comments from local-storage
  const comment_store = new LocalStore(`comment-${article_slug}`)
  let comments = comment_store.getAll() 

  // remove published comments from list
  // we display in comment-review only draft comments 
  comments = comments.filter(comment => comment.status === 'draft')

  comments.map((comment, idx) => {
    const el = make_comment_el(comment, idx, article_slug)
    comment_data.append(el)
  })

  // -- setup comment status and username
  if (comments.length ) {
    const comment_status = document.querySelector('.comment-status')
    comment_status.innerHTML = 'Your unpublished comments:'
  }

  // -- save username into a different, own store
  //    so we can more easily fetch it and pre-add it
  //    to any other comment done afterwards
  let user_name = ''
  if (comments.length > 0) {
    user_name = comments[0].content.user
  }

  const username = setUsername(user_name, article_slug)

  // -- set username to comment-list-status area
  const username_edit = document.querySelector('.comment-username-wrapper')
  const username_input = username_edit.querySelector('input')
  username_input.value = username.value

  // set input text width to specific username length
  username_input.style.width = `${username_input.value.length +1}ch`

  const user_store = new LocalStore('user')
  const username_edit_btn = document.querySelector('.comment-username-edit-btn')

  username_edit_btn.addEventListener('click', (e) => {
    const target = e.target
    
    if (target.textContent === 'save') {
      // save input text
      username.value = username_input.value
      user_store.save(username)

      // reset styles
      target.textContent = 'edit'

      username_input.setAttribute('readonly', 'readonly')
      username_input.style.width = `${username_input.value.length +1}ch`
      username_input.style.borderColor = 'transparent'

      document.querySelector('body').focus()

    } else if (target.textContent === 'edit') {
      // toggle styles

      target.textContent = 'save'

      moveCaretToEnd(username_input)
      
      username_input.removeAttribute('readonly')
      username_input.style.width = 'auto'
      username_input.style.borderColor = 'black'

      username_input.focus()
    }

  })

  // -- publish, edit and remove selected comments
  const publish_btn = document.querySelector('.post_comment')
  const edit_btn = document.querySelector('.comment-edit')
  const remove_btn = document.querySelector('.comment-remove')

  if (comments.length > 0) {
    const inputs = Array.from(document.querySelectorAll('.comment-list-input'))

    // -- publish selected comments
    publish_btn.classList.remove('hidden')

    publish_btn.addEventListener('click', (e) => {

      inputs.map(input => {
        
        if (input.checked) {
          const highlight_id = input.parentNode.id
          const comment = comments.find(comment => {
            if (comment.content.selection_text !== undefined) {
              if (comment.content.selection_text.id === highlight_id) {
                return comment
              }
            } else {
              if (comment.content.block_id === highlight_id) {
                return comment
              }
            }
          })

          comment['status'] = 'published'
          input.value = JSON.stringify(comment)

          // remove selected input-checked items from comments store
          comment_store.remove(highlight_id)

        } else {
          input.value = ''

        }

      })

    })

    // -- edit selected comments
    edit_btn.classList.remove('hidden')

    edit_btn.addEventListener('click', (e) => {
      e.preventDefault()

      const target = e.target
      const operation = target.textContent

      const isInputSelected = inputs.find(input => input.checked)
      if (isInputSelected) {
        if (target.textContent === 'save') {
          target.textContent = 'edit'
        } else if (target.textContent === 'edit') {
          target.textContent = 'save'
        }
      }

      inputs.map((input, idx) => {
        
        if (input.checked) {

          const highlight_id = input.parentNode.id
          const comment = comments.find(comment => {
            if (comment.content.selection_text !== undefined) {
              if (comment.content.selection_text.id === highlight_id) {
                return comment
              }
            } else {
              if (comment.content.block_id === highlight_id) {
                return comment
              }
            }
          })

          const comment_input_text = input.parentNode.querySelector('.comment-label-wrapper > input')

          if (operation === 'save') {

            // save input text
            comment.content.text = comment_input_text.value
            comment_store.save(comment)

            comment_input_text.setAttribute('readonly', 'readonly')
            // comment_input_text.style.width = `${comment_input_text.value.length +1}ch`
            comment_input_text.style.borderColor = 'transparent'

            document.querySelector('body').focus()

          } else if (operation === 'edit') {

            moveCaretToEnd(comment_input_text)
            
            comment_input_text.removeAttribute('readonly')
            comment_input_text.style.width = 'auto'
            comment_input_text.style.borderColor = 'black'

          }

        }

      })

    })
 
    // -- remove selected comments
    remove_btn.classList.remove('hidden')

    remove_btn.addEventListener('click', (e) => {
      e.preventDefault()

      inputs.map(input => {
        if (input.checked) {
          const highlight_id = input.parentNode.id
          comment_store.remove(highlight_id)
          removeCommentDOM(highlight_id)
        }
      })

      commentReviewList(article_slug)
      updateCommentCounter('decrease', comments.length)
    })

  } else {
    publish_btn.classList.add('hidden')
    edit_btn.classList.add('hidden')
    remove_btn.classList.add('hidden')
  }
  
}

function make_comment_el(comment, idx, article_slug) {
  const comment_store = new LocalStore(`comment-${article_slug}`)

  // -- wrapper node
  const wrapper = document.createElement('div')
  wrapper.classList.add('comment-list-wrapper')
  wrapper.setAttribute('id', comment.id)

  // -- input checkbox
  const comment_input = document.createElement('input')
  comment_input.setAttribute('type', 'checkbox')
  comment_input.setAttribute('id', `comment_data[]`)
  comment_input.setAttribute('name', `comment_data[]`)
  comment_input.classList.add('comment-list-input')

  // -- label
  const comment_label = document.createElement('label')
  comment_label.setAttribute('for', `comment-list-${idx}`)
  comment_label.classList.add('comment-list-label')

  // -- text
  const comment_input_text = document.createElement('input')
  comment_input_text.setAttribute('type', 'text')
  comment_input_text.setAttribute('id', `comment-list-text-${idx}`)
  comment_input_text.setAttribute('text', 'comment-list-text')
  comment_input_text.setAttribute('value', comment.content.text)
  comment_input_text.setAttribute('readonly', 'readonly')

  // -- add link to text-selection span
  const highlight_id = comment.id

  const target = document.querySelector(`[data-highlight-id="${highlight_id}"]`)
  if (target !== null) {
    target.setAttribute('id', highlight_id) 
  }

  const show_text_selection = document.createElement('a')
  show_text_selection.setAttribute('href', `#${highlight_id}`)
  show_text_selection.innerHTML = 'Show'
  show_text_selection.classList.add('comment-list-show-highlight')

  show_text_selection.addEventListener('click', (e) => {
    // set border around text-selection for a
    // specific amount of time, then reset the style

    target.style.border = '1px solid blue'

    setTimeout(() => {
      target.style.border = ''
    }, '3000')
  })

  // -- append above nodes to label wrapper node
  const comment_label_wrapper = document.createElement('div')
  comment_label_wrapper.classList.add('comment-label-wrapper')
  comment_label_wrapper.append(comment_input_text)

  // -- append wrapper nodes to label node
  comment_label.append(comment_label_wrapper)
  comment_label_wrapper.append(show_text_selection)

  // -- append input and label nodes to root wrapper node
  wrapper.append(comment_input)
  wrapper.append(comment_label)


  return wrapper

}


// <https://stackoverflow.com/a/4716021>
function moveCaretToEnd(el) {
  if (typeof el.selectionStart == "number") {
    el.selectionStart = el.selectionEnd = el.value.length;
  } else if (typeof el.createTextRange != "undefined") {
    el.focus();
    var range = el.createTextRange();
    range.collapse(false);
    range.select();
  }
}

// save username into a different, own store
// so we can more easily fetch it and pre-add it
// to any other comment done afterwards
function setUsername(name, article_slug) {

  const user_store = new LocalStore('user')
  const user = user_store.getByID(article_slug)

  let username = {id: '', value: ''}

  if (user === undefined || user.value === '') {
    username['id'] = `${article_slug}`
    username['value'] = name

    user_store.save(username)

  } else {
    username = user
  }

  return username

}

function removeCommentDOM(highlight_id) {
  // remove text-highlight
  const tip = document.querySelector(`[data-highlight-id="${highlight_id}"]`)
  if (tip !== null) {
    tip.remove()
  }

  const article_comment = document.querySelector(`[data-text-selection-id="${highlight_id}"]`)
  if (article_comment !== null) {
    article_comment.remove()
  }

}

function updateCommentCounter(op, amount) {
  // update comment count
  const comment_count = document.querySelector('#comment_count')
  const current_count = new Number(comment_count.innerHTML)

  if (op === 'increase') {
    comment_count.innerHTML = current_count + amount

  } else if (op === 'decrease') {
    const result = current_count - amount
    comment_count.innerHTML = result < 0 ? 0 : result
  }

}

module.exports = { commentReviewList,
                   setUsername,
                   updateCommentCounter }

},{"./local.store":4}],2:[function(require,module,exports){
const LocalStore = require('./local.store')
const store = new LocalStore()
const xss = require('xss')
const { commentReviewList, setUsername, updateCommentCounter } = require('./comment-review')

function respond_comment(e) {
  e.preventDefault()

  const form = e.target

  
  // -- save comment to localStorage under:
  //    <current-article-url>: [{..}, ...]

  // to correctly save object into LocalStore
  // the object needs to have an ID field
  // else LocalStore will replace the previous
  // comment with the newest one only
  // nb: check if selection-type => text
  let comment = make_comment(form, store)
  if (!comment) {
    return
  }

  if (comment.content.selection_text !== undefined) {
    comment['id'] = comment.content.selection_text.id
  } else {
    comment['id'] = comment.content.block_id
  }

  // -- save username to local.store if not set yet
  setUsername(comment.content.user, comment.content.article_slug)
  
  const article_slug = comment.content.article_slug
  const comment_store = new LocalStore(`comment-${article_slug}`)
  comment_store.save(comment)
 
  // -- set comment-review list
  commentReviewList(article_slug)

  // -- create and append newly posted comment
  const article_comment = make_comment_el(comment)
  createComment(form, article_comment, comment)
  article_comment.focus()

}

function make_comment( form, store ) {
  // -- comment can either be text-selection
  //    or block-level comment
  //    how to avoid breaking the commenting system
  //    if there's no `selection_text`

  // -- check if text-comment is not empty,
  //    eg just empty spaces
  const children = Array.from(form.children)
  const input_body = children.find( c => c.name == 'body' )

  const input_text = xss(input_body.value.trim())
  if (input_text === '') {
    // stop operation
    input_body.value = input_body.value.trim()
    input_body.focus()
    input_body.placeholder = 'Please add some text'

    input_body.style.border = '1px solid red'

    setTimeout(() => {
      input_body.style.border = ''
      input_body.placeholder = 'comment...'
    }, '3000')

    return false
  }

  const article_slug      = form.getAttribute( 'data-article-slug' )
  const block_id          = form.getAttribute( 'data-block-id' )
  const selection_type    = form.getAttribute( 'data-block-selection-type' )
  const comment_id        = form.getAttribute( 'data-block-comment-id' )
  const selection_text    = store.getByID(comment_id)
  const author            = xss(children.find( c => c.name == 'author' ).value)
  const text              = input_text
  const ts                = new Date().toISOString()

  return {
    slug: ts,
    title: ts,
    template: 'comment',
    status: 'draft',
    content: {
      user: author,
      timestamp: ts,
      article_slug: article_slug,
      block_id: block_id,
      text: text,
      selection_type: selection_type,
      selection_text: selection_text,
      // selection_coords: selection_coords
    }
  }
}

function make_comment_thread_el( form ) {
  const thread = document.createElement( 'section' )
  thread.classList.add( 'thread' )
  const thread_form = form.cloneNode( true )
  thread.appendChild( thread_form )
  return thread
}

function make_comment_el(data) {
  // -- section
  const text_comment = document.createElement('section')
  const section_text = data.content.text
  text_comment.append(section_text)

  // -- footer
  const footer = document.createElement('footer')
  footer.classList.add( 'small_italic' )
  const date = document.createElement('p')
  const timestamp = document.createElement('time')

  // TODO set correct datetime format for timestamp `yyyy-mm-dd hh:mm:ss`
  const ts = new Date(data.content.timestamp)
  timestamp.setAttribute('datetime', data.content.timestamp)
  date.append(timestamp)
  date.innerHTML = `On ${data.content.timestamp}`

  const user = document.createElement('p')
  user.innerHTML = `by ${data.content.user}`

  footer.append(date)
  footer.append(user)

  // -- append everything to <article>
  const article = document.createElement('article')
  article.setAttribute('tabindex', '0')
  article.setAttribute('data-text-selection-id', data.id)
  
  article.classList.add('comment-draft')

  article.append(text_comment)
  article.append(footer)

  return article

}

function createComment(form, article, comment) {
  // -- append new comment to comment thread
  //    before <form>
  let thread

  // form: reset and hide form
  form.reset()
  form.blur()
  
  // check if the form is the toolbar form
  const form_parent = form.parentNode
  if (form_parent.classList.contains('toolbar')) {

    // make a new comment thread for this block
    thread = make_comment_thread_el(form)

    const block_id = form.getAttribute('data-block-id')
    console.log('block_id =>', [form, block_id])

    if (block_id !== '') {
      const block = document.getElementById(block_id)
      const aside = block.querySelector('aside')
      const thread_form = Array.from(thread.children)[0]
      
      thread.insertBefore(article, thread_form)
      aside.appendChild(thread)

      // hide input-form
      form_parent.classList.add('hidden')
      form_parent.style.removeProperty('--top')
      form_parent.style.removeProperty('--left')
    }

  } else {
    thread = form_parent
    thread.insertBefore(article, form)
  }

  // if comment is at block-level, highlight block
  if (comment.content.selection_text === undefined) {
    const block = document.querySelector(`.content-wrapper #${comment.id}`)
    block.classList.add('block-highlight')
  }

  updateCommentCounter('increase', 1)

}

function commentsArticle(comment, form) {
  const article_comment = make_comment_el(comment)

  // set missing data to be used with the input-form
  form.setAttribute('data-block-selection-type', comment.content.selection_type)
  form.setAttribute('data-block-comment-id', comment.id)

  form.querySelector('#selection_type').value = comment.content.selection_type
  form.querySelector('#block_id').value = comment.content.block_id

  // we use setAttribute to force adding the value, else
  // for some reasons it would not work
  form.querySelector('#author').setAttribute('value', comment.content.user)

  createComment(form, article_comment, comment)
}

function blockFocus() {
  // block-focus overlay

  const blocks = Array.from(document.querySelectorAll('.block'))
        .filter(block => !block.classList.contains('columns'))

  const focusOverlay = document.querySelector('.focus-overlay')
  
  blocks.forEach(block => {
    block.addEventListener('focus', (e) => {
      e.target.classList.add('selected')
      focusOverlay.classList.toggle('active')
    })

    block.addEventListener('blur', (e) => {
      e.target.classList.remove('selected')
      focusOverlay.classList.toggle('active')
    })
  })
}

module.exports = { respond_comment,
                   commentsArticle,
                   blockFocus }

},{"./comment-review":1,"./local.store":4,"xss":16}],3:[function(require,module,exports){
const textHighlightMergeUnique = require('./text-highlights-merge-unique')

async function fetchArticleHighlightsFromAPI(article_slug) {
  const url = `/cosmo-api/${ article_slug }`

  return fetch(url)
    .then(response => response.json())
    .then(response => {
      const newData = response
      textHighlightMergeUnique(newData, article_slug)

    })
  .catch(error => {
    return []
  });

}

module.exports = fetchArticleHighlightsFromAPI

},{"./text-highlights-merge-unique":7}],4:[function(require,module,exports){
// <https://github.com/alienzhou/web-highlighter/blob/master/example/local.store.js>

class LocalStore {
    constructor(id) {
        this.key = id !== undefined ? `cosmo-${id}` : 'cosmo-highlight';
    }

    storeToJson() {
        const store = localStorage.getItem(this.key);
        let sources;
        try {
            sources = JSON.parse(store) || [];
        }
        catch (e) {
            sources = [];
        }
        return sources;
    }

    jsonToStore(stores) {
        localStorage.setItem(this.key, JSON.stringify(stores));
    }

    save(data) {
        const stores = this.storeToJson();
        const map = {};
        stores.forEach((store, idx) => map[store.id] = idx);

        if (!Array.isArray(data)) {
            data = [data];
        }

        data.forEach(store => {
            // update
            if (map[store.id] !== undefined) {
                stores[map[store.id]] = store;
            }
            // append
            else {
                stores.push(store);
            }
        })
        this.jsonToStore(stores);
    }

    forceSave(store) {
        const stores = this.storeToJson();
        stores.push(store);
        this.jsonToStore(stores);
    }

    remove(id) {
        const stores = this.storeToJson();
        let index = null;
        for (let i = 0; i < stores.length; i++) {
            if (stores[i].id === id) {
                index = i;
                break;
            }
        }
        stores.splice(index, 1);
        this.jsonToStore(stores);
    }

    getByID(id) {
        const stores = this.storeToJson();
        let index = null;
        for (let i = 0; i < stores.length; i++) {
          if (stores[i].id === id) {
            index = i;
            break;
          }
        }

        const store = stores.find(s => s.id === id);
        return store;
    }

    getAll() {
        return this.storeToJson();
    }

    removeAll() {
        this.jsonToStore([]);
    }
}

module.exports = LocalStore

},{}],5:[function(require,module,exports){
const fetchArticleHighlightsFromAPI = require('../fetch-article-highlights-from-api')
const textHighlight = require('../text-highlight')
const { respond_comment, commentsArticle, blockFocus } = require('../comments')
const LocalStore = require('../local.store')
const { commentReviewList } = require('../comment-review')
const viewMode = require('../view-mode')


const article_slug = window.location.pathname.split('/').pop().split('/').join('+')

// -- synchronize text-highlights backend data with localStorage
;(async() => {
  await fetchArticleHighlightsFromAPI(article_slug)
})()

const comment_forms = document.querySelectorAll( '.comment_form' )

const user_store = new LocalStore('user')
const user = user_store.getByID(article_slug)

const comment_store = new LocalStore(`comment-${article_slug}`)
const comments = comment_store.getAll()

for (const comment_form of comment_forms) {
  // -- set comment to default username if there's any
  if (user !== undefined) {
    comment_form.querySelector('#author').value = user.value
  }

  // -- setup article's draft comments
  //    check if comment has `status: draft` 
  //    and matches current block-id
  const blockID = comment_form.dataset.blockId
  const comments_draft = comments.filter(comment => {
    if (comment.status === 'draft' && comment.content.block_id === blockID) {
      return comment
    }
  })

  if (comments_draft.length > 0) {
    comments_draft.map(comment => {
      commentsArticle(comment, comment_form)
    })
  }

  comment_form.onsubmit = respond_comment
}

const article_element = document.querySelector( 'main' )
const selection_toolbar = document.querySelector( '.toolbar' )
const textRange = textHighlight(article_element, selection_toolbar, article_slug)

// view-mode
viewMode()

// comment-review list
commentReviewList(article_slug)

blockFocus()

},{"../comment-review":1,"../comments":2,"../fetch-article-highlights-from-api":3,"../local.store":4,"../text-highlight":6,"../view-mode":8}],6:[function(require,module,exports){
const Highlighter = require('web-highlighter')
const LocalStore = require('./local.store')


// <https://github.com/alienzhou/web-highlighter/blob/master/example/index.js>
function textHighlight(target, toolbar, article_slug) {

  const highlighter = new Highlighter({
    $root: document.querySelector('.content-wrapper'),
    wrapTag: 'span',
    exceptSelectors: ['.block-title', '.highlight-tip', 'aside']
  })

  highlighter.setOption({
    style: {
      className: 'bgc-accent',
    },
  })

  // -- restore all comments (drafts and published)
  //    which are mapped only to text-highlights with actual
  //    comments attached to it
  //    OR are block-level comments
  const comment_store = new LocalStore(`comment-${article_slug}`)
  comment_store.getAll().forEach(comment => {

    if (typeof comment === 'object') {
      if ('content' in comment && comment.content.selection_text !== undefined) {
        const hs = comment.content.selection_text
        highlighter.fromStore(hs.startMeta, hs.endMeta, hs.text, hs.id)
      }
    }
  });

  const highlight_store = new LocalStore()

  // except for the CREATE event
  // any other event is triggered when interacting
  // with an existing selection span
  highlighter
    .on(Highlighter.event.CLICK, ({id}) => {
      console.log('click -', id);
    })
    .on(Highlighter.event.HOVER, ({id}) => {
      console.log('hover -', id);
      highlighter.addClass('highlight-wrap-hover', id);
    })
    .on(Highlighter.event.HOVER_OUT, ({id}) => {
      console.log('hover out -', id);
      highlighter.removeClass('highlight-wrap-hover', id);
    })
    .on(Highlighter.event.CREATE, ({sources}) => {
      // console.log('CREATE')

      // close the comment box if it is toggled
      toolbar_hide(toolbar)

      // create span to allow removing the selection
      sources.forEach(source => {

        // -- setup text-selection
        const selectionNode = highlighter.getDoms(source.id)[0]
        const blockID = getBlockID(selectionNode)

        const user_store = new LocalStore('user')
        const user = user_store.getByID(article_slug)

        // -- toggle comment input form
        const positionToolbar = getCoords(selectionNode)
        toggle_toolbar(positionToolbar, toolbar, source.id, blockID, user)
        
        // -- save text-selection to highlight_store
        highlight_store.save(source)

        const form = toolbar.querySelector('form')
        form.querySelector('#selection_text').value = JSON.stringify(source)
      })

     })
    .on(Highlighter.event.REMOVE, ({ids}) => {
      // TODO implement remove action
      console.log('remove -', ids);
      // ids.forEach(id => store.remove(id));
    });

  // -- => start highlighter
  highlighter.run();

  function removeSelection(highlighter, id) {
    highlighter.remove(id);
  }

  function getBlockID(node) {
    const block = node.closest('section .block')

    if (block !== undefined && block !== null) {
      if (block.id) {
        return block.id
      }
    }

    return ''
  }

  function toggle_toolbar(position, toolbar, sourceID, blockID, user) {
    const form = toolbar.querySelector('form')
    form.setAttribute('data-block-selection-type', 'text')
    form.setAttribute('data-block-comment-id', sourceID)
    form.setAttribute('data-block-id', blockID)

    form.querySelector('#selection_type').value = 'text'
    form.querySelector('#block_id').value = blockID
    form.querySelector('#author').value = user.value

    // -- display input form for adding a comment
    toolbar.classList.remove('hidden')
    toolbar.style.setProperty( '--top', `${position.top}px` )
    toolbar.style.setProperty( '--left', `${position.left + position.width}px` )

    // handle click button to hide
    const btn_hide = toolbar.querySelector('.toolbar-btn-hide')
    btn_hide.addEventListener('click', () => {
      toolbar_hide(toolbar)

      const tip = document.querySelector(`[data-id="${sourceID}"]`)
      removeSelection(highlighter, sourceID)
    })

  }

  function toolbar_hide(toolbar) {
    toolbar.classList.add( 'hidden' )
    toolbar.style.removeProperty('--top')
    toolbar.style.removeProperty('--left')
  }

  function getCoords(elem) {
    let box = elem.getBoundingClientRect();

    return {
      top: box.top + window.pageYOffset,
      left: box.left + window.pageXOffset,
      width: box.width,
      height: box.height
    };
  }

}

module.exports = textHighlight;

},{"./local.store":4,"web-highlighter":14}],7:[function(require,module,exports){
const LocalStore = require('./local.store')

function textHighlightMergeUnique(newData, article_slug) {
  // merge this array of text-highlights (newData)
  // w/ current localStorage['comment-{article-slug}']

  // when removing comment from backend only, we need force
  // remove it from frontend as well: how to?

  const comment_store = new LocalStore(`comment-${article_slug}`);
  let comments = comment_store.getAll();

  const highlightsMerged = [...comments, ...newData]
  const highlights = highlightsMerged.filter((value, index, self) => {
    return index === self.findIndex(t => {
      return t.id === value.id
    })
  })

  // the save function checks if the item
  // exists already, so we just pass
  // the entire dataset
  comment_store.save(highlights)
}

module.exports = textHighlightMergeUnique

},{"./local.store":4}],8:[function(require,module,exports){
function viewMode() {
  const viewOptions = document.querySelector('.view-options')

  const selectedView = viewOptions.querySelector('input:checked')
  const inputs = Array.from(viewOptions.querySelectorAll('input'))

  inputs.map(input => {
    // set view based on currently selected input radio
    // (eg good for page load / refresh)
    if (input.checked) {
      toggleView(input.value) 
    }

    // set view based on clicked input radio 
    input.addEventListener('click', (e) => {
      const target = e.target
      toggleView(target.value) 
    })
  })

}

function toggleView(targetValue) {
  const columns = Array.from(document.querySelectorAll('.content-wrapper .column'))
  const blocks = Array.from(document.querySelectorAll('.content-wrapper .block'))
  const blocksContent = Array.from(document.querySelectorAll('.content-wrapper .block > .contents'))
  const asides = Array.from(document.querySelectorAll('aside'))
  const threads = Array.from(document.querySelectorAll('.thread'))

  // reset custom settings based on specific view
  columns.map(column => {
    column.setAttribute('data-col-width', '1/1')
  })

  blocks.map(block => {
    block.classList.remove('hidden')
    block.style.boxShadow = 'var(--gridshadow)'
    block.style.padding = '0.5rem'
  })

  blocksContent.map(block => {
    block.classList.remove('font-size-micro')
    block.classList.remove('hidden')
  })

  asides.map(aside => {
    aside.style.maxWidth = 'var(--side-width)'
    aside.style.width = 'var(--side-width)'
    aside.style.setProperty('--n', '1')
  })
  threads.map(thread => thread.classList.remove('hidden'))

  switch(targetValue) {
  case '1':
    // display only article-blocks
    threads.map(thread => thread.classList.add('hidden'))
    break;

  case '2':
    // display article-blocks + comments
    break;

  case '3':
    // display comments + article-blocks
    columns.map(column => {
      column.setAttribute('data-col-width', '1/4')
    })

    blocksContent.map(block => {
      block.classList.add('font-size-micro')
    })

    asides.map(aside => {
      aside.style.width = '67vw'
      aside.style.maxWidth = '67vw'
      aside.style.setProperty('--n', '4')
    })

    break;

  case '4':
    // display comments

    columns.map(column => {
      column.setAttribute('data-col-width', '1/4')
    })

    blocks.map(block => {
      block.style.boxShadow = 'none'
      block.style.padding = '0'
      console.log('block =>', block)
    })

    blocksContent.map(block => {
      block.classList.add('font-size-micro')
      block.classList.add('hidden')
    })

    asides.map(aside => {
      aside.style.width = '78vw'
      aside.style.maxWidth = '78vw'
      aside.style.setProperty('--n', '5')
    })

    break;

  }
}

module.exports = viewMode

},{}],9:[function(require,module,exports){
/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */

var DEFAULT = require('./default');
var parseStyle = require('./parser');
var _ = require('./util');


/**
 * 返回值是否为空
 *
 * @param {Object} obj
 * @return {Boolean}
 */
function isNull (obj) {
  return (obj === undefined || obj === null);
}

/**
 * 浅拷贝对象
 *
 * @param {Object} obj
 * @return {Object}
 */
function shallowCopyObject (obj) {
  var ret = {};
  for (var i in obj) {
    ret[i] = obj[i];
  }
  return ret;
}

/**
 * 创建CSS过滤器
 *
 * @param {Object} options
 *   - {Object} whiteList
 *   - {Function} onAttr
 *   - {Function} onIgnoreAttr
 *   - {Function} safeAttrValue
 */
function FilterCSS (options) {
  options = shallowCopyObject(options || {});
  options.whiteList = options.whiteList || DEFAULT.whiteList;
  options.onAttr = options.onAttr || DEFAULT.onAttr;
  options.onIgnoreAttr = options.onIgnoreAttr || DEFAULT.onIgnoreAttr;
  options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
  this.options = options;
}

FilterCSS.prototype.process = function (css) {
  // 兼容各种奇葩输入
  css = css || '';
  css = css.toString();
  if (!css) return '';

  var me = this;
  var options = me.options;
  var whiteList = options.whiteList;
  var onAttr = options.onAttr;
  var onIgnoreAttr = options.onIgnoreAttr;
  var safeAttrValue = options.safeAttrValue;

  var retCSS = parseStyle(css, function (sourcePosition, position, name, value, source) {

    var check = whiteList[name];
    var isWhite = false;
    if (check === true) isWhite = check;
    else if (typeof check === 'function') isWhite = check(value);
    else if (check instanceof RegExp) isWhite = check.test(value);
    if (isWhite !== true) isWhite = false;

    // 如果过滤后 value 为空则直接忽略
    value = safeAttrValue(name, value);
    if (!value) return;

    var opts = {
      position: position,
      sourcePosition: sourcePosition,
      source: source,
      isWhite: isWhite
    };

    if (isWhite) {

      var ret = onAttr(name, value, opts);
      if (isNull(ret)) {
        return name + ':' + value;
      } else {
        return ret;
      }

    } else {

      var ret = onIgnoreAttr(name, value, opts);
      if (!isNull(ret)) {
        return ret;
      }

    }
  });

  return retCSS;
};


module.exports = FilterCSS;

},{"./default":10,"./parser":12,"./util":13}],10:[function(require,module,exports){
/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */

function getDefaultWhiteList () {
  // 白名单值说明：
  // true: 允许该属性
  // Function: function (val) { } 返回true表示允许该属性，其他值均表示不允许
  // RegExp: regexp.test(val) 返回true表示允许该属性，其他值均表示不允许
  // 除上面列出的值外均表示不允许
  var whiteList = {};

  whiteList['align-content'] = false; // default: auto
  whiteList['align-items'] = false; // default: auto
  whiteList['align-self'] = false; // default: auto
  whiteList['alignment-adjust'] = false; // default: auto
  whiteList['alignment-baseline'] = false; // default: baseline
  whiteList['all'] = false; // default: depending on individual properties
  whiteList['anchor-point'] = false; // default: none
  whiteList['animation'] = false; // default: depending on individual properties
  whiteList['animation-delay'] = false; // default: 0
  whiteList['animation-direction'] = false; // default: normal
  whiteList['animation-duration'] = false; // default: 0
  whiteList['animation-fill-mode'] = false; // default: none
  whiteList['animation-iteration-count'] = false; // default: 1
  whiteList['animation-name'] = false; // default: none
  whiteList['animation-play-state'] = false; // default: running
  whiteList['animation-timing-function'] = false; // default: ease
  whiteList['azimuth'] = false; // default: center
  whiteList['backface-visibility'] = false; // default: visible
  whiteList['background'] = true; // default: depending on individual properties
  whiteList['background-attachment'] = true; // default: scroll
  whiteList['background-clip'] = true; // default: border-box
  whiteList['background-color'] = true; // default: transparent
  whiteList['background-image'] = true; // default: none
  whiteList['background-origin'] = true; // default: padding-box
  whiteList['background-position'] = true; // default: 0% 0%
  whiteList['background-repeat'] = true; // default: repeat
  whiteList['background-size'] = true; // default: auto
  whiteList['baseline-shift'] = false; // default: baseline
  whiteList['binding'] = false; // default: none
  whiteList['bleed'] = false; // default: 6pt
  whiteList['bookmark-label'] = false; // default: content()
  whiteList['bookmark-level'] = false; // default: none
  whiteList['bookmark-state'] = false; // default: open
  whiteList['border'] = true; // default: depending on individual properties
  whiteList['border-bottom'] = true; // default: depending on individual properties
  whiteList['border-bottom-color'] = true; // default: current color
  whiteList['border-bottom-left-radius'] = true; // default: 0
  whiteList['border-bottom-right-radius'] = true; // default: 0
  whiteList['border-bottom-style'] = true; // default: none
  whiteList['border-bottom-width'] = true; // default: medium
  whiteList['border-collapse'] = true; // default: separate
  whiteList['border-color'] = true; // default: depending on individual properties
  whiteList['border-image'] = true; // default: none
  whiteList['border-image-outset'] = true; // default: 0
  whiteList['border-image-repeat'] = true; // default: stretch
  whiteList['border-image-slice'] = true; // default: 100%
  whiteList['border-image-source'] = true; // default: none
  whiteList['border-image-width'] = true; // default: 1
  whiteList['border-left'] = true; // default: depending on individual properties
  whiteList['border-left-color'] = true; // default: current color
  whiteList['border-left-style'] = true; // default: none
  whiteList['border-left-width'] = true; // default: medium
  whiteList['border-radius'] = true; // default: 0
  whiteList['border-right'] = true; // default: depending on individual properties
  whiteList['border-right-color'] = true; // default: current color
  whiteList['border-right-style'] = true; // default: none
  whiteList['border-right-width'] = true; // default: medium
  whiteList['border-spacing'] = true; // default: 0
  whiteList['border-style'] = true; // default: depending on individual properties
  whiteList['border-top'] = true; // default: depending on individual properties
  whiteList['border-top-color'] = true; // default: current color
  whiteList['border-top-left-radius'] = true; // default: 0
  whiteList['border-top-right-radius'] = true; // default: 0
  whiteList['border-top-style'] = true; // default: none
  whiteList['border-top-width'] = true; // default: medium
  whiteList['border-width'] = true; // default: depending on individual properties
  whiteList['bottom'] = false; // default: auto
  whiteList['box-decoration-break'] = true; // default: slice
  whiteList['box-shadow'] = true; // default: none
  whiteList['box-sizing'] = true; // default: content-box
  whiteList['box-snap'] = true; // default: none
  whiteList['box-suppress'] = true; // default: show
  whiteList['break-after'] = true; // default: auto
  whiteList['break-before'] = true; // default: auto
  whiteList['break-inside'] = true; // default: auto
  whiteList['caption-side'] = false; // default: top
  whiteList['chains'] = false; // default: none
  whiteList['clear'] = true; // default: none
  whiteList['clip'] = false; // default: auto
  whiteList['clip-path'] = false; // default: none
  whiteList['clip-rule'] = false; // default: nonzero
  whiteList['color'] = true; // default: implementation dependent
  whiteList['color-interpolation-filters'] = true; // default: auto
  whiteList['column-count'] = false; // default: auto
  whiteList['column-fill'] = false; // default: balance
  whiteList['column-gap'] = false; // default: normal
  whiteList['column-rule'] = false; // default: depending on individual properties
  whiteList['column-rule-color'] = false; // default: current color
  whiteList['column-rule-style'] = false; // default: medium
  whiteList['column-rule-width'] = false; // default: medium
  whiteList['column-span'] = false; // default: none
  whiteList['column-width'] = false; // default: auto
  whiteList['columns'] = false; // default: depending on individual properties
  whiteList['contain'] = false; // default: none
  whiteList['content'] = false; // default: normal
  whiteList['counter-increment'] = false; // default: none
  whiteList['counter-reset'] = false; // default: none
  whiteList['counter-set'] = false; // default: none
  whiteList['crop'] = false; // default: auto
  whiteList['cue'] = false; // default: depending on individual properties
  whiteList['cue-after'] = false; // default: none
  whiteList['cue-before'] = false; // default: none
  whiteList['cursor'] = false; // default: auto
  whiteList['direction'] = false; // default: ltr
  whiteList['display'] = true; // default: depending on individual properties
  whiteList['display-inside'] = true; // default: auto
  whiteList['display-list'] = true; // default: none
  whiteList['display-outside'] = true; // default: inline-level
  whiteList['dominant-baseline'] = false; // default: auto
  whiteList['elevation'] = false; // default: level
  whiteList['empty-cells'] = false; // default: show
  whiteList['filter'] = false; // default: none
  whiteList['flex'] = false; // default: depending on individual properties
  whiteList['flex-basis'] = false; // default: auto
  whiteList['flex-direction'] = false; // default: row
  whiteList['flex-flow'] = false; // default: depending on individual properties
  whiteList['flex-grow'] = false; // default: 0
  whiteList['flex-shrink'] = false; // default: 1
  whiteList['flex-wrap'] = false; // default: nowrap
  whiteList['float'] = false; // default: none
  whiteList['float-offset'] = false; // default: 0 0
  whiteList['flood-color'] = false; // default: black
  whiteList['flood-opacity'] = false; // default: 1
  whiteList['flow-from'] = false; // default: none
  whiteList['flow-into'] = false; // default: none
  whiteList['font'] = true; // default: depending on individual properties
  whiteList['font-family'] = true; // default: implementation dependent
  whiteList['font-feature-settings'] = true; // default: normal
  whiteList['font-kerning'] = true; // default: auto
  whiteList['font-language-override'] = true; // default: normal
  whiteList['font-size'] = true; // default: medium
  whiteList['font-size-adjust'] = true; // default: none
  whiteList['font-stretch'] = true; // default: normal
  whiteList['font-style'] = true; // default: normal
  whiteList['font-synthesis'] = true; // default: weight style
  whiteList['font-variant'] = true; // default: normal
  whiteList['font-variant-alternates'] = true; // default: normal
  whiteList['font-variant-caps'] = true; // default: normal
  whiteList['font-variant-east-asian'] = true; // default: normal
  whiteList['font-variant-ligatures'] = true; // default: normal
  whiteList['font-variant-numeric'] = true; // default: normal
  whiteList['font-variant-position'] = true; // default: normal
  whiteList['font-weight'] = true; // default: normal
  whiteList['grid'] = false; // default: depending on individual properties
  whiteList['grid-area'] = false; // default: depending on individual properties
  whiteList['grid-auto-columns'] = false; // default: auto
  whiteList['grid-auto-flow'] = false; // default: none
  whiteList['grid-auto-rows'] = false; // default: auto
  whiteList['grid-column'] = false; // default: depending on individual properties
  whiteList['grid-column-end'] = false; // default: auto
  whiteList['grid-column-start'] = false; // default: auto
  whiteList['grid-row'] = false; // default: depending on individual properties
  whiteList['grid-row-end'] = false; // default: auto
  whiteList['grid-row-start'] = false; // default: auto
  whiteList['grid-template'] = false; // default: depending on individual properties
  whiteList['grid-template-areas'] = false; // default: none
  whiteList['grid-template-columns'] = false; // default: none
  whiteList['grid-template-rows'] = false; // default: none
  whiteList['hanging-punctuation'] = false; // default: none
  whiteList['height'] = true; // default: auto
  whiteList['hyphens'] = false; // default: manual
  whiteList['icon'] = false; // default: auto
  whiteList['image-orientation'] = false; // default: auto
  whiteList['image-resolution'] = false; // default: normal
  whiteList['ime-mode'] = false; // default: auto
  whiteList['initial-letters'] = false; // default: normal
  whiteList['inline-box-align'] = false; // default: last
  whiteList['justify-content'] = false; // default: auto
  whiteList['justify-items'] = false; // default: auto
  whiteList['justify-self'] = false; // default: auto
  whiteList['left'] = false; // default: auto
  whiteList['letter-spacing'] = true; // default: normal
  whiteList['lighting-color'] = true; // default: white
  whiteList['line-box-contain'] = false; // default: block inline replaced
  whiteList['line-break'] = false; // default: auto
  whiteList['line-grid'] = false; // default: match-parent
  whiteList['line-height'] = false; // default: normal
  whiteList['line-snap'] = false; // default: none
  whiteList['line-stacking'] = false; // default: depending on individual properties
  whiteList['line-stacking-ruby'] = false; // default: exclude-ruby
  whiteList['line-stacking-shift'] = false; // default: consider-shifts
  whiteList['line-stacking-strategy'] = false; // default: inline-line-height
  whiteList['list-style'] = true; // default: depending on individual properties
  whiteList['list-style-image'] = true; // default: none
  whiteList['list-style-position'] = true; // default: outside
  whiteList['list-style-type'] = true; // default: disc
  whiteList['margin'] = true; // default: depending on individual properties
  whiteList['margin-bottom'] = true; // default: 0
  whiteList['margin-left'] = true; // default: 0
  whiteList['margin-right'] = true; // default: 0
  whiteList['margin-top'] = true; // default: 0
  whiteList['marker-offset'] = false; // default: auto
  whiteList['marker-side'] = false; // default: list-item
  whiteList['marks'] = false; // default: none
  whiteList['mask'] = false; // default: border-box
  whiteList['mask-box'] = false; // default: see individual properties
  whiteList['mask-box-outset'] = false; // default: 0
  whiteList['mask-box-repeat'] = false; // default: stretch
  whiteList['mask-box-slice'] = false; // default: 0 fill
  whiteList['mask-box-source'] = false; // default: none
  whiteList['mask-box-width'] = false; // default: auto
  whiteList['mask-clip'] = false; // default: border-box
  whiteList['mask-image'] = false; // default: none
  whiteList['mask-origin'] = false; // default: border-box
  whiteList['mask-position'] = false; // default: center
  whiteList['mask-repeat'] = false; // default: no-repeat
  whiteList['mask-size'] = false; // default: border-box
  whiteList['mask-source-type'] = false; // default: auto
  whiteList['mask-type'] = false; // default: luminance
  whiteList['max-height'] = true; // default: none
  whiteList['max-lines'] = false; // default: none
  whiteList['max-width'] = true; // default: none
  whiteList['min-height'] = true; // default: 0
  whiteList['min-width'] = true; // default: 0
  whiteList['move-to'] = false; // default: normal
  whiteList['nav-down'] = false; // default: auto
  whiteList['nav-index'] = false; // default: auto
  whiteList['nav-left'] = false; // default: auto
  whiteList['nav-right'] = false; // default: auto
  whiteList['nav-up'] = false; // default: auto
  whiteList['object-fit'] = false; // default: fill
  whiteList['object-position'] = false; // default: 50% 50%
  whiteList['opacity'] = false; // default: 1
  whiteList['order'] = false; // default: 0
  whiteList['orphans'] = false; // default: 2
  whiteList['outline'] = false; // default: depending on individual properties
  whiteList['outline-color'] = false; // default: invert
  whiteList['outline-offset'] = false; // default: 0
  whiteList['outline-style'] = false; // default: none
  whiteList['outline-width'] = false; // default: medium
  whiteList['overflow'] = false; // default: depending on individual properties
  whiteList['overflow-wrap'] = false; // default: normal
  whiteList['overflow-x'] = false; // default: visible
  whiteList['overflow-y'] = false; // default: visible
  whiteList['padding'] = true; // default: depending on individual properties
  whiteList['padding-bottom'] = true; // default: 0
  whiteList['padding-left'] = true; // default: 0
  whiteList['padding-right'] = true; // default: 0
  whiteList['padding-top'] = true; // default: 0
  whiteList['page'] = false; // default: auto
  whiteList['page-break-after'] = false; // default: auto
  whiteList['page-break-before'] = false; // default: auto
  whiteList['page-break-inside'] = false; // default: auto
  whiteList['page-policy'] = false; // default: start
  whiteList['pause'] = false; // default: implementation dependent
  whiteList['pause-after'] = false; // default: implementation dependent
  whiteList['pause-before'] = false; // default: implementation dependent
  whiteList['perspective'] = false; // default: none
  whiteList['perspective-origin'] = false; // default: 50% 50%
  whiteList['pitch'] = false; // default: medium
  whiteList['pitch-range'] = false; // default: 50
  whiteList['play-during'] = false; // default: auto
  whiteList['position'] = false; // default: static
  whiteList['presentation-level'] = false; // default: 0
  whiteList['quotes'] = false; // default: text
  whiteList['region-fragment'] = false; // default: auto
  whiteList['resize'] = false; // default: none
  whiteList['rest'] = false; // default: depending on individual properties
  whiteList['rest-after'] = false; // default: none
  whiteList['rest-before'] = false; // default: none
  whiteList['richness'] = false; // default: 50
  whiteList['right'] = false; // default: auto
  whiteList['rotation'] = false; // default: 0
  whiteList['rotation-point'] = false; // default: 50% 50%
  whiteList['ruby-align'] = false; // default: auto
  whiteList['ruby-merge'] = false; // default: separate
  whiteList['ruby-position'] = false; // default: before
  whiteList['shape-image-threshold'] = false; // default: 0.0
  whiteList['shape-outside'] = false; // default: none
  whiteList['shape-margin'] = false; // default: 0
  whiteList['size'] = false; // default: auto
  whiteList['speak'] = false; // default: auto
  whiteList['speak-as'] = false; // default: normal
  whiteList['speak-header'] = false; // default: once
  whiteList['speak-numeral'] = false; // default: continuous
  whiteList['speak-punctuation'] = false; // default: none
  whiteList['speech-rate'] = false; // default: medium
  whiteList['stress'] = false; // default: 50
  whiteList['string-set'] = false; // default: none
  whiteList['tab-size'] = false; // default: 8
  whiteList['table-layout'] = false; // default: auto
  whiteList['text-align'] = true; // default: start
  whiteList['text-align-last'] = true; // default: auto
  whiteList['text-combine-upright'] = true; // default: none
  whiteList['text-decoration'] = true; // default: none
  whiteList['text-decoration-color'] = true; // default: currentColor
  whiteList['text-decoration-line'] = true; // default: none
  whiteList['text-decoration-skip'] = true; // default: objects
  whiteList['text-decoration-style'] = true; // default: solid
  whiteList['text-emphasis'] = true; // default: depending on individual properties
  whiteList['text-emphasis-color'] = true; // default: currentColor
  whiteList['text-emphasis-position'] = true; // default: over right
  whiteList['text-emphasis-style'] = true; // default: none
  whiteList['text-height'] = true; // default: auto
  whiteList['text-indent'] = true; // default: 0
  whiteList['text-justify'] = true; // default: auto
  whiteList['text-orientation'] = true; // default: mixed
  whiteList['text-overflow'] = true; // default: clip
  whiteList['text-shadow'] = true; // default: none
  whiteList['text-space-collapse'] = true; // default: collapse
  whiteList['text-transform'] = true; // default: none
  whiteList['text-underline-position'] = true; // default: auto
  whiteList['text-wrap'] = true; // default: normal
  whiteList['top'] = false; // default: auto
  whiteList['transform'] = false; // default: none
  whiteList['transform-origin'] = false; // default: 50% 50% 0
  whiteList['transform-style'] = false; // default: flat
  whiteList['transition'] = false; // default: depending on individual properties
  whiteList['transition-delay'] = false; // default: 0s
  whiteList['transition-duration'] = false; // default: 0s
  whiteList['transition-property'] = false; // default: all
  whiteList['transition-timing-function'] = false; // default: ease
  whiteList['unicode-bidi'] = false; // default: normal
  whiteList['vertical-align'] = false; // default: baseline
  whiteList['visibility'] = false; // default: visible
  whiteList['voice-balance'] = false; // default: center
  whiteList['voice-duration'] = false; // default: auto
  whiteList['voice-family'] = false; // default: implementation dependent
  whiteList['voice-pitch'] = false; // default: medium
  whiteList['voice-range'] = false; // default: medium
  whiteList['voice-rate'] = false; // default: normal
  whiteList['voice-stress'] = false; // default: normal
  whiteList['voice-volume'] = false; // default: medium
  whiteList['volume'] = false; // default: medium
  whiteList['white-space'] = false; // default: normal
  whiteList['widows'] = false; // default: 2
  whiteList['width'] = true; // default: auto
  whiteList['will-change'] = false; // default: auto
  whiteList['word-break'] = true; // default: normal
  whiteList['word-spacing'] = true; // default: normal
  whiteList['word-wrap'] = true; // default: normal
  whiteList['wrap-flow'] = false; // default: auto
  whiteList['wrap-through'] = false; // default: wrap
  whiteList['writing-mode'] = false; // default: horizontal-tb
  whiteList['z-index'] = false; // default: auto

  return whiteList;
}


/**
 * 匹配到白名单上的一个属性时
 *
 * @param {String} name
 * @param {String} value
 * @param {Object} options
 * @return {String}
 */
function onAttr (name, value, options) {
  // do nothing
}

/**
 * 匹配到不在白名单上的一个属性时
 *
 * @param {String} name
 * @param {String} value
 * @param {Object} options
 * @return {String}
 */
function onIgnoreAttr (name, value, options) {
  // do nothing
}

var REGEXP_URL_JAVASCRIPT = /javascript\s*\:/img;

/**
 * 过滤属性值
 *
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function safeAttrValue(name, value) {
  if (REGEXP_URL_JAVASCRIPT.test(value)) return '';
  return value;
}


exports.whiteList = getDefaultWhiteList();
exports.getDefaultWhiteList = getDefaultWhiteList;
exports.onAttr = onAttr;
exports.onIgnoreAttr = onIgnoreAttr;
exports.safeAttrValue = safeAttrValue;

},{}],11:[function(require,module,exports){
/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */

var DEFAULT = require('./default');
var FilterCSS = require('./css');


/**
 * XSS过滤
 *
 * @param {String} css 要过滤的CSS代码
 * @param {Object} options 选项：whiteList, onAttr, onIgnoreAttr
 * @return {String}
 */
function filterCSS (html, options) {
  var xss = new FilterCSS(options);
  return xss.process(html);
}


// 输出
exports = module.exports = filterCSS;
exports.FilterCSS = FilterCSS;
for (var i in DEFAULT) exports[i] = DEFAULT[i];

// 在浏览器端使用
if (typeof window !== 'undefined') {
  window.filterCSS = module.exports;
}

},{"./css":9,"./default":10}],12:[function(require,module,exports){
/**
 * cssfilter
 *
 * @author 老雷<leizongmin@gmail.com>
 */

var _ = require('./util');


/**
 * 解析style
 *
 * @param {String} css
 * @param {Function} onAttr 处理属性的函数
 *   参数格式： function (sourcePosition, position, name, value, source)
 * @return {String}
 */
function parseStyle (css, onAttr) {
  css = _.trimRight(css);
  if (css[css.length - 1] !== ';') css += ';';
  var cssLength = css.length;
  var isParenthesisOpen = false;
  var lastPos = 0;
  var i = 0;
  var retCSS = '';

  function addNewAttr () {
    // 如果没有正常的闭合圆括号，则直接忽略当前属性
    if (!isParenthesisOpen) {
      var source = _.trim(css.slice(lastPos, i));
      var j = source.indexOf(':');
      if (j !== -1) {
        var name = _.trim(source.slice(0, j));
        var value = _.trim(source.slice(j + 1));
        // 必须有属性名称
        if (name) {
          var ret = onAttr(lastPos, retCSS.length, name, value, source);
          if (ret) retCSS += ret + '; ';
        }
      }
    }
    lastPos = i + 1;
  }

  for (; i < cssLength; i++) {
    var c = css[i];
    if (c === '/' && css[i + 1] === '*') {
      // 备注开始
      var j = css.indexOf('*/', i + 2);
      // 如果没有正常的备注结束，则后面的部分全部跳过
      if (j === -1) break;
      // 直接将当前位置调到备注结尾，并且初始化状态
      i = j + 1;
      lastPos = i + 1;
      isParenthesisOpen = false;
    } else if (c === '(') {
      isParenthesisOpen = true;
    } else if (c === ')') {
      isParenthesisOpen = false;
    } else if (c === ';') {
      if (isParenthesisOpen) {
        // 在圆括号里面，忽略
      } else {
        addNewAttr();
      }
    } else if (c === '\n') {
      addNewAttr();
    }
  }

  return _.trim(retCSS);
}

module.exports = parseStyle;

},{"./util":13}],13:[function(require,module,exports){
module.exports = {
  indexOf: function (arr, item) {
    var i, j;
    if (Array.prototype.indexOf) {
      return arr.indexOf(item);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      if (arr[i] === item) {
        return i;
      }
    }
    return -1;
  },
  forEach: function (arr, fn, scope) {
    var i, j;
    if (Array.prototype.forEach) {
      return arr.forEach(fn, scope);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      fn.call(scope, arr[i], i, arr);
    }
  },
  trim: function (str) {
    if (String.prototype.trim) {
      return str.trim();
    }
    return str.replace(/(^\s*)|(\s*$)/g, '');
  },
  trimRight: function (str) {
    if (String.prototype.trimRight) {
      return str.trimRight();
    }
    return str.replace(/(\s*$)/g, '');
  }
};

},{}],14:[function(require,module,exports){
/*! web-highlighter v0.7.4 https://github.com/alienzhou/web-highlighter */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Highlighter=t():e.Highlighter=t()}(window,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=7)}([function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.eventEmitter=t.INTERNAL_ERROR_EVENT=t.UNKNOWN_IDX=t.ROOT_IDX=t.getStylesheet=t.getDefaultOptions=t.CAMEL_DATASET_SPLIT_TYPE=t.CAMEL_DATASET_IDENTIFIER_EXTRA=t.CAMEL_DATASET_IDENTIFIER=t.DATASET_SPLIT_TYPE=t.DATASET_IDENTIFIER_EXTRA=t.DATASET_IDENTIFIER=t.STYLESHEET_ID=t.LOCAL_STORE_KEY=t.ID_DIVISION=void 0;var a=i(n(10)),l=i(n(2));t.ID_DIVISION=";",t.LOCAL_STORE_KEY="highlight-mengshou",t.STYLESHEET_ID="highlight-mengshou-style",t.DATASET_IDENTIFIER="highlight-id",t.DATASET_IDENTIFIER_EXTRA="highlight-id-extra",t.DATASET_SPLIT_TYPE="highlight-split-type",t.CAMEL_DATASET_IDENTIFIER=a.default(t.DATASET_IDENTIFIER),t.CAMEL_DATASET_IDENTIFIER_EXTRA=a.default(t.DATASET_IDENTIFIER_EXTRA),t.CAMEL_DATASET_SPLIT_TYPE=a.default(t.DATASET_SPLIT_TYPE);t.getDefaultOptions=function(){return{$root:document||document.documentElement,exceptSelectors:null,wrapTag:"span",verbose:!1,style:{className:"highlight-mengshou-wrap"}}};t.getStylesheet=function(){return"\n    ."+t.getDefaultOptions().style.className+" {\n        background: #ff9;\n        cursor: pointer;\n    }\n    ."+t.getDefaultOptions().style.className+".active {\n        background: #ffb;\n    }\n"},t.ROOT_IDX=-2,t.UNKNOWN_IDX=-1,t.INTERNAL_ERROR_EVENT="error";var u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t}(l.default);t.eventEmitter=new u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.UserInputEvent=t.SelectedNodeType=t.CreateFrom=t.EventType=t.ERROR=t.SplitType=void 0,function(e){e.none="none",e.head="head",e.tail="tail",e.both="both"}(t.SplitType||(t.SplitType={})),function(e){e.DOM_TYPE_ERROR="[DOM] Receive wrong node type.",e.DOM_SELECTION_EMPTY="[DOM] The selection contains no dom node, may be you except them.",e.RANGE_INVALID="[RANGE] Got invalid dom range, can't convert to a valid highlight range.",e.RANGE_NODE_INVALID="[RANGE] Start or end node isn't a text node, it may occur an error.",e.DB_ID_DUPLICATE_ERROR="[STORE] Unique id conflict.",e.CACHE_SET_ERROR="[CACHE] Cache.data can't be set manually, please use .save().",e.SOURCE_TYPE_ERROR="[SOURCE] Object isn't a highlight source instance.",e.HIGHLIGHT_RANGE_FROZEN="[HIGHLIGHT_RANGE] A highlight range must be frozen before render.",e.HIGHLIGHT_SOURCE_RECREATE="[HIGHLIGHT_SOURCE] Recreate highlights from sources error.",e.HIGHLIGHT_SOURCE_NONE_RENDER="[HIGHLIGHT_SOURCE] This highlight source isn't rendered. May be the exception skips it or the dom structure has changed."}(t.ERROR||(t.ERROR={})),function(e){e.CREATE="selection:create",e.REMOVE="selection:remove",e.MODIFY="selection:modify",e.HOVER="selection:hover",e.HOVER_OUT="selection:hover-out",e.CLICK="selection:click"}(t.EventType||(t.EventType={})),function(e){e.STORE="from-store",e.INPUT="from-input"}(t.CreateFrom||(t.CreateFrom={})),function(e){e.text="text",e.span="span"}(t.SelectedNodeType||(t.SelectedNodeType={})),function(e){e.touchend="touchend",e.mouseup="mouseup",e.touchstart="touchstart",e.click="click",e.mouseover="mouseover"}(t.UserInputEvent||(t.UserInputEvent={}))},function(e,t,n){"use strict";var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(r(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(){this.handlersMap=Object.create(null)}return e.prototype.on=function(e,t){return this.handlersMap[e]||(this.handlersMap[e]=[]),this.handlersMap[e].push(t),this},e.prototype.off=function(e,t){return this.handlersMap[e]&&this.handlersMap[e].splice(this.handlersMap[e].indexOf(t)>>>0,1),this},e.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];return this.handlersMap[e]&&this.handlersMap[e].slice().forEach((function(e){e.apply(void 0,o(t))})),this},e}();t.default=i},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(5)),i=n(9),a=function(){function e(e,t,n,r,o){this.startMeta=e,this.endMeta=t,this.text=n,this.id=r,this.__isHighlightSource={},o&&(this.extra=o)}return e.prototype.deSerialize=function(e,t){var n=i.queryElementNode(this,e),r=n.start,a=n.end,l=i.getTextChildByOffset(r,this.startMeta.textOffset),u=i.getTextChildByOffset(a,this.endMeta.textOffset);if(!t.Serialize.Restore.isEmpty()){var s=t.Serialize.Restore.call(this,l,u)||[];l=s[0]||l,u=s[1]||u}return new o.default(l,u,this.text,this.id,!0)},e}();t.default=a},function(e,t,n){"use strict";var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},i=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(o(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0}),t.hasClass=t.removeAllClass=t.removeClass=t.addClass=t.addEventListener=t.removeEventListener=t.forEach=t.getHighlightById=t.getHighlightsByRoot=t.getExtraHighlightId=t.getHighlightId=t.isHighlightWrapNode=void 0;var a=n(0);t.isHighlightWrapNode=function(e){return!!e.dataset&&!!e.dataset[a.CAMEL_DATASET_IDENTIFIER]};var l=function(e,n){for(var r=!1,o=null;e;){if(t.isHighlightWrapNode(e)&&(o=e),e===n){r=!0;break}e=e.parentNode}return r?o:null};t.getHighlightId=function(e,t){return(e=l(e,t))?e.dataset[a.CAMEL_DATASET_IDENTIFIER]:""};t.getExtraHighlightId=function(e,t){return(e=l(e,t))?e.dataset[a.CAMEL_DATASET_IDENTIFIER_EXTRA].split(a.ID_DIVISION).filter((function(e){return e})):[]};t.getHighlightsByRoot=function(e,t){var n,o;Array.isArray(e)||(e=[e]);var i=[];try{for(var l=r(e),u=l.next();!u.done;u=l.next()){var s=u.value.querySelectorAll(t+"[data-"+a.DATASET_IDENTIFIER+"]");i.push.apply(i,s)}}catch(e){n={error:e}}finally{try{u&&!u.done&&(o=l.return)&&o.call(l)}finally{if(n)throw n.error}}return i};t.getHighlightById=function(e,t,n){var o,i,l=[],u=new RegExp("("+t+"\\"+a.ID_DIVISION+"|\\"+a.ID_DIVISION+"?"+t+"$)"),s=e.querySelectorAll(n+"[data-"+a.DATASET_IDENTIFIER+"]");try{for(var d=r(s),c=d.next();!c.done;c=d.next()){var f=c.value;if(f.dataset[a.CAMEL_DATASET_IDENTIFIER]!==t){var h=f.dataset[a.CAMEL_DATASET_IDENTIFIER_EXTRA];u.test(h)&&l.push(f)}else l.push(f)}}catch(e){o={error:e}}finally{try{c&&!c.done&&(i=d.return)&&i.call(d)}finally{if(o)throw o.error}}return l};t.forEach=function(e,t){for(var n=0;n<e.length;n++)t(e[n],n,e)};t.removeEventListener=function(e,t,n){e.removeEventListener(t,n)};t.addEventListener=function(e,n,r){return e.addEventListener(n,r),function(){t.removeEventListener(e,n,r)}};t.addClass=function(e,t){var n;Array.isArray(t)||(t=[t]),(n=e.classList).add.apply(n,i(t))};t.removeClass=function(e,t){e.classList.remove(t)};t.removeAllClass=function(e){e.className=""};t.hasClass=function(e,t){return e.classList.contains(t)}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=r(n(3)),i=n(1),a=n(11),l=r(n(6)),u=n(12),s=n(0),d=function(){function e(e,t,n,r,o){void 0===o&&(o=!1),3===e.$node.nodeType&&3===t.$node.nodeType||s.eventEmitter.emit(s.INTERNAL_ERROR_EVENT,{type:i.ERROR.RANGE_NODE_INVALID}),this.start=u.formatDomNode(e),this.end=u.formatDomNode(t),this.text=n,this.frozen=o,this.id=r}return e.fromSelection=function(t){var n=a.getDomRange();if(!n)return null;var r={$node:n.startContainer,offset:n.startOffset},o={$node:n.endContainer,offset:n.endOffset},i=n.toString(),u=t.call(r,o,i);return new e(r,o,i,u=null!=u?u:l.default())},e.prototype.serialize=function(e,t){var n,r=u.getDomMeta(this.start.$node,this.start.offset,e),i=u.getDomMeta(this.end.$node,this.end.offset,e);return t.Serialize.RecordInfo.isEmpty()||(n=t.Serialize.RecordInfo.call(this.start,this.end,e)),this.frozen=!0,new o.default(r,i,this.text,this.id,n)},e.removeDomRange=a.removeSelection,e}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function e(t){return t?(t^16*Math.random()>>t/4).toString(16):([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,e)}},function(e,t,n){e.exports=n(8)},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var l=a(n(2)),u=a(n(5)),s=a(n(3)),d=a(n(6)),c=a(n(13)),f=a(n(14)),h=a(n(16)),p=a(n(17)),E=n(0),_=n(1),v=n(4),T=function(e){function t(t){var n=e.call(this)||this;n.event=f.default(),n.run=function(){return v.addEventListener(n.options.$root,n.event.PointerEnd,n._handleSelection)},n.stop=function(){v.removeEventListener(n.options.$root,n.event.PointerEnd,n._handleSelection)},n.addClass=function(e,t){n.getDoms(t).forEach((function(t){v.addClass(t,e)}))},n.removeClass=function(e,t){n.getDoms(t).forEach((function(t){v.removeClass(t,e)}))},n.getIdByDom=function(e){return v.getHighlightId(e,n.options.$root)},n.getExtraIdByDom=function(e){return v.getExtraHighlightId(e,n.options.$root)},n.getDoms=function(e){return e?v.getHighlightById(n.options.$root,e,n.options.wrapTag):v.getHighlightsByRoot(n.options.$root,n.options.wrapTag)},n.dispose=function(){var e=n.options.$root;v.removeEventListener(e,n.event.PointerOver,n._handleHighlightHover),v.removeEventListener(e,n.event.PointerEnd,n._handleSelection),v.removeEventListener(e,n.event.PointerTap,n._handleHighlightClick),n.removeAll()},n.setOption=function(e){n.options=i(i({},n.options),e),n.painter=new p.default({$root:n.options.$root,wrapTag:n.options.wrapTag,className:n.options.style.className,exceptSelectors:n.options.exceptSelectors},n.hooks)},n.fromRange=function(e){var t={$node:e.startContainer,offset:e.startOffset},r={$node:e.endContainer,offset:e.endOffset},o=e.toString(),i=n.hooks.Render.UUID.call(t,r,o);i=null!=i?i:d.default();var a=new u.default(t,r,o,i);return a?n._highlightFromHRange(a):(E.eventEmitter.emit(E.INTERNAL_ERROR_EVENT,{type:_.ERROR.RANGE_INVALID}),null)},n.fromStore=function(e,t,r,o,i){var a=new s.default(e,t,r,o,i);try{return n._highlightFromHSource(a),a}catch(e){return E.eventEmitter.emit(E.INTERNAL_ERROR_EVENT,{type:_.ERROR.HIGHLIGHT_SOURCE_RECREATE,error:e,detail:a}),null}},n._getHooks=function(){return{Render:{UUID:new c.default("Render.UUID"),SelectedNodes:new c.default("Render.SelectedNodes"),WrapNode:new c.default("Render.WrapNode")},Serialize:{Restore:new c.default("Serialize.Restore"),RecordInfo:new c.default("Serialize.RecordInfo")},Remove:{UpdateNodes:new c.default("Remove.UpdateNodes")}}},n._highlightFromHRange=function(e){var t=e.serialize(n.options.$root,n.hooks);return 0===n.painter.highlightRange(e).length?(E.eventEmitter.emit(E.INTERNAL_ERROR_EVENT,{type:_.ERROR.DOM_SELECTION_EMPTY}),null):(n.cache.save(t),n.emit(_.EventType.CREATE,{sources:[t],type:_.CreateFrom.INPUT},n),t)},n._handleSelection=function(){var e=u.default.fromSelection(n.hooks.Render.UUID);e&&(n._highlightFromHRange(e),u.default.removeDomRange())},n._handleHighlightHover=function(e){var t=e.target;if(!v.isHighlightWrapNode(t))return n._hoverId&&n.emit(_.EventType.HOVER_OUT,{id:n._hoverId},n,e),void(n._hoverId=null);var r=v.getHighlightId(t,n.options.$root);n._hoverId!==r&&(n._hoverId&&n.emit(_.EventType.HOVER_OUT,{id:n._hoverId},n,e),n._hoverId=r,n.emit(_.EventType.HOVER,{id:n._hoverId},n,e))},n._handleError=function(e){n.options.verbose&&console.warn(e)},n._handleHighlightClick=function(e){var t=e.target;if(v.isHighlightWrapNode(t)){var r=v.getHighlightId(t,n.options.$root);n.emit(_.EventType.CLICK,{id:r},n,e)}},n.options=E.getDefaultOptions(),n.hooks=n._getHooks(),n.setOption(t),n.cache=new h.default;var r=n.options.$root;return v.addEventListener(r,n.event.PointerOver,n._handleHighlightHover),v.addEventListener(r,n.event.PointerTap,n._handleHighlightClick),E.eventEmitter.on(E.INTERNAL_ERROR_EVENT,n._handleError),n}return o(t,e),t.prototype.remove=function(e){if(e){var t=this.painter.removeHighlight(e);this.cache.remove(e),t&&this.emit(_.EventType.REMOVE,{ids:[e]},this)}},t.prototype.removeAll=function(){this.painter.removeAllHighlight();var e=this.cache.removeAll();this.emit(_.EventType.REMOVE,{ids:e},this)},t.prototype._highlightFromHSource=function(e){void 0===e&&(e=[]);var t=this.painter.highlightSource(e);this.emit(_.EventType.CREATE,{sources:t,type:_.CreateFrom.STORE},this),this.cache.save(e)},t.event=_.EventType,t.isHighlightWrapNode=v.isHighlightWrapNode,t.isHighlightSource=function(e){return!!e.__isHighlightSource},t}(l.default);t.default=T},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.queryElementNode=t.getTextChildByOffset=void 0;var r=n(0);t.getTextChildByOffset=function(e,t){for(var n=[e],r=null,o=0,i=0;r=n.pop();){for(var a=r.childNodes,l=a.length-1;l>=0;l--)n.push(a[l]);if(3===r.nodeType&&(i=t-o,(o+=r.textContent.length)>=t))break}return r||(r=e),{$node:r,offset:i}};t.queryElementNode=function(e,t){return{start:e.startMeta.parentIndex===r.ROOT_IDX?t:t.getElementsByTagName(e.startMeta.parentTagName)[e.startMeta.parentIndex],end:e.endMeta.parentIndex===r.ROOT_IDX?t:t.getElementsByTagName(e.endMeta.parentTagName)[e.endMeta.parentIndex]}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.split("-").reduce((function(e,t,n){return e+(0===n?t:t[0].toUpperCase()+t.slice(1))}),"")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.removeSelection=t.getDomRange=void 0;t.getDomRange=function(){var e=window.getSelection();return e.isCollapsed?(console.debug("no text selected"),null):e.getRangeAt(0)};t.removeSelection=function(){window.getSelection().removeAllRanges()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.formatDomNode=t.getDomMeta=void 0;var r=n(0);t.getDomMeta=function(e,t,n){var o=function(e){if(e instanceof HTMLElement&&(!e.dataset||!e.dataset[r.CAMEL_DATASET_IDENTIFIER]))return e;for(var t=e.parentNode;null==t?void 0:t.dataset[r.CAMEL_DATASET_IDENTIFIER];)t=t.parentNode;return t}(e),i=o===n?r.ROOT_IDX:function(e,t){for(var n=e.tagName,o=t.getElementsByTagName(n),i=0;i<o.length;i++)if(e===o[i])return i;return r.UNKNOWN_IDX}(o,n),a=function(e,t){for(var n=[e],r=null,o=0;r=n.pop();){for(var i=r.childNodes,a=i.length-1;a>=0;a--)n.push(i[a]);if(3===r.nodeType&&r!==t)o+=r.textContent.length;else if(3===r.nodeType)break}return o}(o,e);return{parentTagName:o.tagName,parentIndex:i,textOffset:a+t}};t.formatDomNode=function(e){return 3===e.$node.nodeType||4===e.$node.nodeType||8===e.$node.nodeType?e:{$node:e.$node.childNodes[e.offset],offset:0}}},function(e,t,n){"use strict";var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(r(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0});var i=function(){function e(e){this.name="",this.ops=[],this.name=e}return e.prototype.tap=function(e){var t=this;return-1===this.ops.indexOf(e)&&this.ops.push(e),function(){t.remove(e)}},e.prototype.remove=function(e){var t=this.ops.indexOf(e);t<0||this.ops.splice(t,1)},e.prototype.isEmpty=function(){return 0===this.ops.length},e.prototype.call=function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return this.ops.forEach((function(n){e=n.apply(void 0,o(t))})),e},e}();t.default=i},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),i=r(n(15));t.default=function(){var e=i.default(window.navigator.userAgent);return{PointerEnd:e?o.UserInputEvent.touchend:o.UserInputEvent.mouseup,PointerTap:e?o.UserInputEvent.touchstart:o.UserInputEvent.click,PointerOver:e?o.UserInputEvent.touchstart:o.UserInputEvent.mouseover}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=/Android|iPhone|BlackBerry|BB10|Opera Mini|Phone|Mobile|Silk|Windows Phone|Mobile(?:.+)Firefox\b/i;t.default=function(e){return r.test(e)}},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var l=a(n(2)),u=n(1),s=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._data=new Map,t}return o(t,e),Object.defineProperty(t.prototype,"data",{get:function(){return this.getAll()},set:function(e){throw u.ERROR.CACHE_SET_ERROR},enumerable:!1,configurable:!0}),t.prototype.save=function(e){var t=this;Array.isArray(e)?e.forEach((function(e){return t._data.set(e.id,e)})):this._data.set(e.id,e)},t.prototype.get=function(e){return this._data.get(e)},t.prototype.remove=function(e){this._data.delete(e)},t.prototype.getAll=function(){var e,t,n=[];try{for(var r=i(this._data),o=r.next();!o.done;o=r.next()){var a=o.value;n.push(a[1])}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}return n},t.prototype.removeAll=function(){var e,t,n=[];try{for(var r=i(this._data),o=r.next();!o.done;o=r.next()){var a=o.value;n.push(a[0])}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}return this._data=new Map,n},t}(l.default);t.default=s},function(e,t,n){"use strict";var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},o=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},i=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(o(arguments[t]));return e},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var l=a(n(3)),u=n(18),s=n(4),d=n(1),c=n(20),f=n(0),h=function(){function e(e,t){this.options={$root:e.$root,wrapTag:e.wrapTag,exceptSelectors:e.exceptSelectors,className:e.className},this.hooks=t,c.initDefaultStylesheet()}return e.prototype.highlightRange=function(e){var t=this;if(!e.frozen)throw d.ERROR.HIGHLIGHT_RANGE_FROZEN;var n=this.options,r=n.$root,o=n.className,i=n.exceptSelectors,a=this.hooks,l=u.getSelectedNodes(r,e.start,e.end,i);return a.Render.SelectedNodes.isEmpty()||(l=a.Render.SelectedNodes.call(e.id,l)||[]),l.map((function(n){var r=u.wrapHighlight(n,e,o,t.options.wrapTag);return a.Render.WrapNode.isEmpty()||(r=a.Render.WrapNode.call(e.id,r)),r}))},e.prototype.highlightSource=function(e){var t=this,n=Array.isArray(e)?e:[e],r=[];return n.forEach((function(e){if(e instanceof l.default){var n=e.deSerialize(t.options.$root,t.hooks);t.highlightRange(n).length>0?r.push(e):f.eventEmitter.emit(f.INTERNAL_ERROR_EVENT,{type:d.ERROR.HIGHLIGHT_SOURCE_NONE_RENDER,detail:e})}else f.eventEmitter.emit(f.INTERNAL_ERROR_EVENT,{type:d.ERROR.SOURCE_TYPE_ERROR})})),r},e.prototype.removeHighlight=function(e){var t,n,o=new RegExp("("+e+"\\"+f.ID_DIVISION+"|\\"+f.ID_DIVISION+"?"+e+"$)"),a=this.hooks,l=this.options.wrapTag,d=document.querySelectorAll(l+"[data-"+f.DATASET_IDENTIFIER+"]"),c=[],h=[],p=[];try{for(var E=r(d),_=E.next();!_.done;_=E.next()){var v=_.value,T=v.dataset[f.CAMEL_DATASET_IDENTIFIER],y=v.dataset[f.CAMEL_DATASET_IDENTIFIER_EXTRA];T!==e||y?T===e?h.push(v):T!==e&&o.test(y)&&p.push(v):c.push(v)}}catch(e){t={error:e}}finally{try{_&&!_.done&&(n=E.return)&&n.call(E)}finally{if(t)throw t.error}}return c.forEach((function(t){var n=t.parentNode,r=document.createDocumentFragment();s.forEach(t.childNodes,(function(e){return r.appendChild(e.cloneNode(!1))}));var o=t.previousSibling,i=t.nextSibling;n.replaceChild(r,t),u.normalizeSiblingText(o,!0),u.normalizeSiblingText(i,!1),a.Remove.UpdateNodes.call(e,t,"remove")})),h.forEach((function(t){var n=t.dataset,r=n[f.CAMEL_DATASET_IDENTIFIER_EXTRA].split(f.ID_DIVISION),o=r.shift(),u=document.querySelector(l+"[data-"+f.DATASET_IDENTIFIER+'="'+o+'"]');u&&(s.removeAllClass(t),s.addClass(t,i(u.classList))),n[f.CAMEL_DATASET_IDENTIFIER]=o,n[f.CAMEL_DATASET_IDENTIFIER_EXTRA]=r.join(f.ID_DIVISION),a.Remove.UpdateNodes.call(e,t,"id-update")})),p.forEach((function(t){var n=t.dataset[f.CAMEL_DATASET_IDENTIFIER_EXTRA];t.dataset[f.CAMEL_DATASET_IDENTIFIER_EXTRA]=n.replace(o,""),a.Remove.UpdateNodes.call(e,t,"extra-update")})),c.length+h.length+p.length!==0},e.prototype.removeAllHighlight=function(){var e=this.options,t=e.wrapTag,n=e.$root;s.getHighlightsByRoot(n,t).forEach((function(e){var t=e.parentNode,n=document.createDocumentFragment();s.forEach(e.childNodes,(function(e){return n.appendChild(e.cloneNode(!1))})),t.replaceChild(n,e)}))},e}();t.default=h},function(e,t,n){"use strict";var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a},o=this&&this.__spread||function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(r(arguments[t]));return e};Object.defineProperty(t,"__esModule",{value:!0}),t.normalizeSiblingText=t.wrapHighlight=t.getSelectedNodes=void 0;var i=n(1),a=n(4),l=n(0),u=n(19),s=function(e,t){if(!e)return!1;if(/^\./.test(t)){var n=t.replace(/^\./,"");return e&&a.hasClass(e,n)}if(/^#/.test(t)){var r=t.replace(/^#/,"");return e&&e.id===r}var o=t.toUpperCase();return e&&e.tagName===o};t.getSelectedNodes=function(e,t,n,r){var o=t.$node,a=n.$node,l=t.offset,u=n.offset;if(o===a&&o instanceof Text)return function(e,t,n,r){for(var o=e,a=function(e){return null==r?void 0:r.some((function(t){return s(e,t)}))};o;){if(1===o.nodeType&&a(o))return[];o=o.parentNode}e.splitText(t);var l=e.nextSibling;return l.splitText(n-t),[{$node:l,type:i.SelectedNodeType.text,splitType:i.SplitType.both}]}(o,l,u,r);for(var d=[e],c=[],f=function(e){return null==r?void 0:r.some((function(t){return s(e,t)}))},h=!1,p=null;p=d.pop();)if(1!==p.nodeType||!f(p)){for(var E=p.childNodes,_=E.length-1;_>=0;_--)d.push(E[_]);if(p===o){if(3===p.nodeType){p.splitText(l);var v=p.nextSibling;c.push({$node:v,type:i.SelectedNodeType.text,splitType:i.SplitType.head})}h=!0}else{if(p===a){if(3===p.nodeType)(v=p).splitText(u),c.push({$node:v,type:i.SelectedNodeType.text,splitType:i.SplitType.tail});break}h&&3===p.nodeType&&c.push({$node:p,type:i.SelectedNodeType.text,splitType:i.SplitType.none})}}return c};var d=function(e,t){var n=Array.isArray(t)?t:[t];return(n=0===n.length?[l.getDefaultOptions().style.className]:n).forEach((function(t){a.addClass(e,t)})),e},c=function(e){return!e||!e.textContent};t.wrapHighlight=function(e,t,n,r){var s=e.$node.parentNode,f=e.$node.previousSibling,h=e.$node.nextSibling;return a.isHighlightWrapNode(s)?!a.isHighlightWrapNode(s)||c(f)&&c(h)?function(e,t,n){var r=e.$node.parentNode,o=r;a.removeAllClass(o),d(o,n);var i=r.dataset,u=i[l.CAMEL_DATASET_IDENTIFIER];return i[l.CAMEL_DATASET_IDENTIFIER]=t.id,i[l.CAMEL_DATASET_IDENTIFIER_EXTRA]=i[l.CAMEL_DATASET_IDENTIFIER_EXTRA]?u+l.ID_DIVISION+i[l.CAMEL_DATASET_IDENTIFIER_EXTRA]:u,o}(e,t,n):function(e,t,n,r){var a=document.createElement(r),s=e.$node.parentNode,c=e.$node.previousSibling,f=e.$node.nextSibling,h=document.createDocumentFragment(),p=s.dataset[l.CAMEL_DATASET_IDENTIFIER],E=s.dataset[l.CAMEL_DATASET_IDENTIFIER_EXTRA],_=E?p+l.ID_DIVISION+E:p;a.setAttribute("data-"+l.DATASET_IDENTIFIER,t.id),a.setAttribute("data-"+l.DATASET_IDENTIFIER_EXTRA,_),a.appendChild(e.$node.cloneNode(!1));var v,T=!1,y=!1;c&&((g=s.cloneNode(!1)).textContent=c.textContent,h.appendChild(g),T=!0);var g,I=[];(Array.isArray(n)?I.push.apply(I,o(n)):I.push(n),d(a,u.unique(I)),h.appendChild(a),f)&&((g=s.cloneNode(!1)).textContent=f.textContent,h.appendChild(g),y=!0);return v=T&&y?i.SplitType.both:T?i.SplitType.head:y?i.SplitType.tail:i.SplitType.none,a.setAttribute("data-"+l.DATASET_SPLIT_TYPE,v),s.parentNode.replaceChild(h,s),a}(e,t,n,r):function(e,t,n,r){var o=document.createElement(r);return d(o,n),o.appendChild(e.$node.cloneNode(!1)),e.$node.parentNode.replaceChild(o,e.$node),o.setAttribute("data-"+l.DATASET_IDENTIFIER,t.id),o.setAttribute("data-"+l.DATASET_SPLIT_TYPE,e.splitType),o.setAttribute("data-"+l.DATASET_IDENTIFIER_EXTRA,""),o}(e,t,n,r)};t.normalizeSiblingText=function(e,t){if(void 0===t&&(t=!0),e&&3===e.nodeType){var n=t?e.nextSibling:e.previousSibling;if(3===n.nodeType){var r=n.nodeValue;e.nodeValue=t?e.nodeValue+r:r+e.nodeValue,n.parentNode.removeChild(n)}}}},function(e,t,n){"use strict";var r=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")};Object.defineProperty(t,"__esModule",{value:!0}),t.unique=void 0;t.unique=function(e){var t,n,o=[];try{for(var i=r(e),a=i.next();!a.done;a=i.next()){var l=a.value;-1===o.indexOf(l)&&o.push(l)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.initDefaultStylesheet=void 0;var r=n(0);t.initDefaultStylesheet=function(){var e=r.STYLESHEET_ID,t=document.getElementById(e);if(!t){var n=document.createTextNode(r.getStylesheet());(t=document.createElement("style")).id=e,t.appendChild(n),document.head.appendChild(t)}return t}}]).default}));

},{}],15:[function(require,module,exports){
/**
 * default settings
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var FilterCSS = require("cssfilter").FilterCSS;
var getDefaultCSSWhiteList = require("cssfilter").getDefaultWhiteList;
var _ = require("./util");

function getDefaultWhiteList() {
  return {
    a: ["target", "href", "title"],
    abbr: ["title"],
    address: [],
    area: ["shape", "coords", "href", "alt"],
    article: [],
    aside: [],
    audio: [
      "autoplay",
      "controls",
      "crossorigin",
      "loop",
      "muted",
      "preload",
      "src",
    ],
    b: [],
    bdi: ["dir"],
    bdo: ["dir"],
    big: [],
    blockquote: ["cite"],
    br: [],
    caption: [],
    center: [],
    cite: [],
    code: [],
    col: ["align", "valign", "span", "width"],
    colgroup: ["align", "valign", "span", "width"],
    dd: [],
    del: ["datetime"],
    details: ["open"],
    div: [],
    dl: [],
    dt: [],
    em: [],
    figcaption: [],
    figure: [],
    font: ["color", "size", "face"],
    footer: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    header: [],
    hr: [],
    i: [],
    img: ["src", "alt", "title", "width", "height"],
    ins: ["datetime"],
    li: [],
    mark: [],
    nav: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    section: [],
    small: [],
    span: [],
    sub: [],
    summary: [],
    sup: [],
    strong: [],
    strike: [],
    table: ["width", "border", "align", "valign"],
    tbody: ["align", "valign"],
    td: ["width", "rowspan", "colspan", "align", "valign"],
    tfoot: ["align", "valign"],
    th: ["width", "rowspan", "colspan", "align", "valign"],
    thead: ["align", "valign"],
    tr: ["rowspan", "align", "valign"],
    tt: [],
    u: [],
    ul: [],
    video: [
      "autoplay",
      "controls",
      "crossorigin",
      "loop",
      "muted",
      "playsinline",
      "poster",
      "preload",
      "src",
      "height",
      "width",
    ],
  };
}

var defaultCSSFilter = new FilterCSS();

/**
 * default onTag function
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */
function onTag(tag, html, options) {
  // do nothing
}

/**
 * default onIgnoreTag function
 *
 * @param {String} tag
 * @param {String} html
 * @param {Object} options
 * @return {String}
 */
function onIgnoreTag(tag, html, options) {
  // do nothing
}

/**
 * default onTagAttr function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function onTagAttr(tag, name, value) {
  // do nothing
}

/**
 * default onIgnoreTagAttr function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @return {String}
 */
function onIgnoreTagAttr(tag, name, value) {
  // do nothing
}

/**
 * default escapeHtml function
 *
 * @param {String} html
 */
function escapeHtml(html) {
  return html.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
}

/**
 * default safeAttrValue function
 *
 * @param {String} tag
 * @param {String} name
 * @param {String} value
 * @param {Object} cssFilter
 * @return {String}
 */
function safeAttrValue(tag, name, value, cssFilter) {
  // unescape attribute value firstly
  value = friendlyAttrValue(value);

  if (name === "href" || name === "src") {
    // filter `href` and `src` attribute
    // only allow the value that starts with `http://` | `https://` | `mailto:` | `/` | `#`
    value = _.trim(value);
    if (value === "#") return "#";
    if (
      !(
        value.substr(0, 7) === "http://" ||
        value.substr(0, 8) === "https://" ||
        value.substr(0, 7) === "mailto:" ||
        value.substr(0, 4) === "tel:" ||
        value.substr(0, 11) === "data:image/" ||
        value.substr(0, 6) === "ftp://" ||
        value.substr(0, 2) === "./" ||
        value.substr(0, 3) === "../" ||
        value[0] === "#" ||
        value[0] === "/"
      )
    ) {
      return "";
    }
  } else if (name === "background") {
    // filter `background` attribute (maybe no use)
    // `javascript:`
    REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
      return "";
    }
  } else if (name === "style") {
    // `expression()`
    REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
      return "";
    }
    // `url()`
    REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;
    if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
      REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
      if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
        return "";
      }
    }
    if (cssFilter !== false) {
      cssFilter = cssFilter || defaultCSSFilter;
      value = cssFilter.process(value);
    }
  }

  // escape `<>"` before returns
  value = escapeAttrValue(value);
  return value;
}

// RegExp list
var REGEXP_LT = /</g;
var REGEXP_GT = />/g;
var REGEXP_QUOTE = /"/g;
var REGEXP_QUOTE_2 = /&quot;/g;
var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
// var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\/\*|\*\//gm;
var REGEXP_DEFAULT_ON_TAG_ATTR_4 =
  /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a):/gi;
// var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:/gi;
// var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:\s*image\//gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_7 =
  /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;

/**
 * escape double quote
 *
 * @param {String} str
 * @return {String} str
 */
function escapeQuote(str) {
  return str.replace(REGEXP_QUOTE, "&quot;");
}

/**
 * unescape double quote
 *
 * @param {String} str
 * @return {String} str
 */
function unescapeQuote(str) {
  return str.replace(REGEXP_QUOTE_2, '"');
}

/**
 * escape html entities
 *
 * @param {String} str
 * @return {String}
 */
function escapeHtmlEntities(str) {
  return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str, code) {
    return code[0] === "x" || code[0] === "X"
      ? String.fromCharCode(parseInt(code.substr(1), 16))
      : String.fromCharCode(parseInt(code, 10));
  });
}

/**
 * escape html5 new danger entities
 *
 * @param {String} str
 * @return {String}
 */
function escapeDangerHtml5Entities(str) {
  return str
    .replace(REGEXP_ATTR_VALUE_COLON, ":")
    .replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
}

/**
 * clear nonprintable characters
 *
 * @param {String} str
 * @return {String}
 */
function clearNonPrintableCharacter(str) {
  var str2 = "";
  for (var i = 0, len = str.length; i < len; i++) {
    str2 += str.charCodeAt(i) < 32 ? " " : str.charAt(i);
  }
  return _.trim(str2);
}

/**
 * get friendly attribute value
 *
 * @param {String} str
 * @return {String}
 */
function friendlyAttrValue(str) {
  str = unescapeQuote(str);
  str = escapeHtmlEntities(str);
  str = escapeDangerHtml5Entities(str);
  str = clearNonPrintableCharacter(str);
  return str;
}

/**
 * unescape attribute value
 *
 * @param {String} str
 * @return {String}
 */
function escapeAttrValue(str) {
  str = escapeQuote(str);
  str = escapeHtml(str);
  return str;
}

/**
 * `onIgnoreTag` function for removing all the tags that are not in whitelist
 */
function onIgnoreTagStripAll() {
  return "";
}

/**
 * remove tag body
 * specify a `tags` list, if the tag is not in the `tags` list then process by the specify function (optional)
 *
 * @param {array} tags
 * @param {function} next
 */
function StripTagBody(tags, next) {
  if (typeof next !== "function") {
    next = function () {};
  }

  var isRemoveAllTag = !Array.isArray(tags);
  function isRemoveTag(tag) {
    if (isRemoveAllTag) return true;
    return _.indexOf(tags, tag) !== -1;
  }

  var removeList = [];
  var posStart = false;

  return {
    onIgnoreTag: function (tag, html, options) {
      if (isRemoveTag(tag)) {
        if (options.isClosing) {
          var ret = "[/removed]";
          var end = options.position + ret.length;
          removeList.push([
            posStart !== false ? posStart : options.position,
            end,
          ]);
          posStart = false;
          return ret;
        } else {
          if (!posStart) {
            posStart = options.position;
          }
          return "[removed]";
        }
      } else {
        return next(tag, html, options);
      }
    },
    remove: function (html) {
      var rethtml = "";
      var lastPos = 0;
      _.forEach(removeList, function (pos) {
        rethtml += html.slice(lastPos, pos[0]);
        lastPos = pos[1];
      });
      rethtml += html.slice(lastPos);
      return rethtml;
    },
  };
}

/**
 * remove html comments
 *
 * @param {String} html
 * @return {String}
 */
function stripCommentTag(html) {
  var retHtml = "";
  var lastPos = 0;
  while (lastPos < html.length) {
    var i = html.indexOf("<!--", lastPos);
    if (i === -1) {
      retHtml += html.slice(lastPos);
      break;
    }
    retHtml += html.slice(lastPos, i);
    var j = html.indexOf("-->", i);
    if (j === -1) {
      break;
    }
    lastPos = j + 3;
  }
  return retHtml;
}

/**
 * remove invisible characters
 *
 * @param {String} html
 * @return {String}
 */
function stripBlankChar(html) {
  var chars = html.split("");
  chars = chars.filter(function (char) {
    var c = char.charCodeAt(0);
    if (c === 127) return false;
    if (c <= 31) {
      if (c === 10 || c === 13) return true;
      return false;
    }
    return true;
  });
  return chars.join("");
}

exports.whiteList = getDefaultWhiteList();
exports.getDefaultWhiteList = getDefaultWhiteList;
exports.onTag = onTag;
exports.onIgnoreTag = onIgnoreTag;
exports.onTagAttr = onTagAttr;
exports.onIgnoreTagAttr = onIgnoreTagAttr;
exports.safeAttrValue = safeAttrValue;
exports.escapeHtml = escapeHtml;
exports.escapeQuote = escapeQuote;
exports.unescapeQuote = unescapeQuote;
exports.escapeHtmlEntities = escapeHtmlEntities;
exports.escapeDangerHtml5Entities = escapeDangerHtml5Entities;
exports.clearNonPrintableCharacter = clearNonPrintableCharacter;
exports.friendlyAttrValue = friendlyAttrValue;
exports.escapeAttrValue = escapeAttrValue;
exports.onIgnoreTagStripAll = onIgnoreTagStripAll;
exports.StripTagBody = StripTagBody;
exports.stripCommentTag = stripCommentTag;
exports.stripBlankChar = stripBlankChar;
exports.cssFilter = defaultCSSFilter;
exports.getDefaultCSSWhiteList = getDefaultCSSWhiteList;

},{"./util":18,"cssfilter":11}],16:[function(require,module,exports){
/**
 * xss
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var DEFAULT = require("./default");
var parser = require("./parser");
var FilterXSS = require("./xss");

/**
 * filter xss function
 *
 * @param {String} html
 * @param {Object} options { whiteList, onTag, onTagAttr, onIgnoreTag, onIgnoreTagAttr, safeAttrValue, escapeHtml }
 * @return {String}
 */
function filterXSS(html, options) {
  var xss = new FilterXSS(options);
  return xss.process(html);
}

exports = module.exports = filterXSS;
exports.filterXSS = filterXSS;
exports.FilterXSS = FilterXSS;

(function () {
  for (var i in DEFAULT) {
    exports[i] = DEFAULT[i];
  }
  for (var j in parser) {
    exports[j] = parser[j];
  }
})();

// using `xss` on the browser, output `filterXSS` to the globals
if (typeof window !== "undefined") {
  window.filterXSS = module.exports;
}

// using `xss` on the WebWorker, output `filterXSS` to the globals
function isWorkerEnv() {
  return (
    typeof self !== "undefined" &&
    typeof DedicatedWorkerGlobalScope !== "undefined" &&
    self instanceof DedicatedWorkerGlobalScope
  );
}
if (isWorkerEnv()) {
  self.filterXSS = module.exports;
}

},{"./default":15,"./parser":17,"./xss":19}],17:[function(require,module,exports){
/**
 * Simple HTML Parser
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var _ = require("./util");

/**
 * get tag name
 *
 * @param {String} html e.g. '<a hef="#">'
 * @return {String}
 */
function getTagName(html) {
  var i = _.spaceIndex(html);
  var tagName;
  if (i === -1) {
    tagName = html.slice(1, -1);
  } else {
    tagName = html.slice(1, i + 1);
  }
  tagName = _.trim(tagName).toLowerCase();
  if (tagName.slice(0, 1) === "/") tagName = tagName.slice(1);
  if (tagName.slice(-1) === "/") tagName = tagName.slice(0, -1);
  return tagName;
}

/**
 * is close tag?
 *
 * @param {String} html 如：'<a hef="#">'
 * @return {Boolean}
 */
function isClosing(html) {
  return html.slice(0, 2) === "</";
}

/**
 * parse input html and returns processed html
 *
 * @param {String} html
 * @param {Function} onTag e.g. function (sourcePosition, position, tag, html, isClosing)
 * @param {Function} escapeHtml
 * @return {String}
 */
function parseTag(html, onTag, escapeHtml) {
  "use strict";

  var rethtml = "";
  var lastPos = 0;
  var tagStart = false;
  var quoteStart = false;
  var currentPos = 0;
  var len = html.length;
  var currentTagName = "";
  var currentHtml = "";

  chariterator: for (currentPos = 0; currentPos < len; currentPos++) {
    var c = html.charAt(currentPos);
    if (tagStart === false) {
      if (c === "<") {
        tagStart = currentPos;
        continue;
      }
    } else {
      if (quoteStart === false) {
        if (c === "<") {
          rethtml += escapeHtml(html.slice(lastPos, currentPos));
          tagStart = currentPos;
          lastPos = currentPos;
          continue;
        }
        if (c === ">" || currentPos === len - 1) {
          rethtml += escapeHtml(html.slice(lastPos, tagStart));
          currentHtml = html.slice(tagStart, currentPos + 1);
          currentTagName = getTagName(currentHtml);
          rethtml += onTag(
            tagStart,
            rethtml.length,
            currentTagName,
            currentHtml,
            isClosing(currentHtml)
          );
          lastPos = currentPos + 1;
          tagStart = false;
          continue;
        }
        if (c === '"' || c === "'") {
          var i = 1;
          var ic = html.charAt(currentPos - i);

          while (ic.trim() === "" || ic === "=") {
            if (ic === "=") {
              quoteStart = c;
              continue chariterator;
            }
            ic = html.charAt(currentPos - ++i);
          }
        }
      } else {
        if (c === quoteStart) {
          quoteStart = false;
          continue;
        }
      }
    }
  }
  if (lastPos < len) {
    rethtml += escapeHtml(html.substr(lastPos));
  }

  return rethtml;
}

var REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9\\_:.-]/gim;

/**
 * parse input attributes and returns processed attributes
 *
 * @param {String} html e.g. `href="#" target="_blank"`
 * @param {Function} onAttr e.g. `function (name, value)`
 * @return {String}
 */
function parseAttr(html, onAttr) {
  "use strict";

  var lastPos = 0;
  var lastMarkPos = 0;
  var retAttrs = [];
  var tmpName = false;
  var len = html.length;

  function addAttr(name, value) {
    name = _.trim(name);
    name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, "").toLowerCase();
    if (name.length < 1) return;
    var ret = onAttr(name, value || "");
    if (ret) retAttrs.push(ret);
  }

  // 逐个分析字符
  for (var i = 0; i < len; i++) {
    var c = html.charAt(i);
    var v, j;
    if (tmpName === false && c === "=") {
      tmpName = html.slice(lastPos, i);
      lastPos = i + 1;
      lastMarkPos = html.charAt(lastPos) === '"' || html.charAt(lastPos) === "'" ? lastPos : findNextQuotationMark(html, i + 1);
      continue;
    }
    if (tmpName !== false) {
      if (
        i === lastMarkPos
      ) {
        j = html.indexOf(c, i + 1);
        if (j === -1) {
          break;
        } else {
          v = _.trim(html.slice(lastMarkPos + 1, j));
          addAttr(tmpName, v);
          tmpName = false;
          i = j;
          lastPos = i + 1;
          continue;
        }
      }
    }
    if (/\s|\n|\t/.test(c)) {
      html = html.replace(/\s|\n|\t/g, " ");
      if (tmpName === false) {
        j = findNextEqual(html, i);
        if (j === -1) {
          v = _.trim(html.slice(lastPos, i));
          addAttr(v);
          tmpName = false;
          lastPos = i + 1;
          continue;
        } else {
          i = j - 1;
          continue;
        }
      } else {
        j = findBeforeEqual(html, i - 1);
        if (j === -1) {
          v = _.trim(html.slice(lastPos, i));
          v = stripQuoteWrap(v);
          addAttr(tmpName, v);
          tmpName = false;
          lastPos = i + 1;
          continue;
        } else {
          continue;
        }
      }
    }
  }

  if (lastPos < html.length) {
    if (tmpName === false) {
      addAttr(html.slice(lastPos));
    } else {
      addAttr(tmpName, stripQuoteWrap(_.trim(html.slice(lastPos))));
    }
  }

  return _.trim(retAttrs.join(" "));
}

function findNextEqual(str, i) {
  for (; i < str.length; i++) {
    var c = str[i];
    if (c === " ") continue;
    if (c === "=") return i;
    return -1;
  }
}

function findNextQuotationMark(str, i) {
  for (; i < str.length; i++) {
    var c = str[i];
    if (c === " ") continue;
    if (c === "'" || c === '"') return i;
    return -1;
  }
}

function findBeforeEqual(str, i) {
  for (; i > 0; i--) {
    var c = str[i];
    if (c === " ") continue;
    if (c === "=") return i;
    return -1;
  }
}

function isQuoteWrapString(text) {
  if (
    (text[0] === '"' && text[text.length - 1] === '"') ||
    (text[0] === "'" && text[text.length - 1] === "'")
  ) {
    return true;
  } else {
    return false;
  }
}

function stripQuoteWrap(text) {
  if (isQuoteWrapString(text)) {
    return text.substr(1, text.length - 2);
  } else {
    return text;
  }
}

exports.parseTag = parseTag;
exports.parseAttr = parseAttr;

},{"./util":18}],18:[function(require,module,exports){
module.exports = {
  indexOf: function (arr, item) {
    var i, j;
    if (Array.prototype.indexOf) {
      return arr.indexOf(item);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      if (arr[i] === item) {
        return i;
      }
    }
    return -1;
  },
  forEach: function (arr, fn, scope) {
    var i, j;
    if (Array.prototype.forEach) {
      return arr.forEach(fn, scope);
    }
    for (i = 0, j = arr.length; i < j; i++) {
      fn.call(scope, arr[i], i, arr);
    }
  },
  trim: function (str) {
    if (String.prototype.trim) {
      return str.trim();
    }
    return str.replace(/(^\s*)|(\s*$)/g, "");
  },
  spaceIndex: function (str) {
    var reg = /\s|\n|\t/;
    var match = reg.exec(str);
    return match ? match.index : -1;
  },
};

},{}],19:[function(require,module,exports){
/**
 * filter xss
 *
 * @author Zongmin Lei<leizongmin@gmail.com>
 */

var FilterCSS = require("cssfilter").FilterCSS;
var DEFAULT = require("./default");
var parser = require("./parser");
var parseTag = parser.parseTag;
var parseAttr = parser.parseAttr;
var _ = require("./util");

/**
 * returns `true` if the input value is `undefined` or `null`
 *
 * @param {Object} obj
 * @return {Boolean}
 */
function isNull(obj) {
  return obj === undefined || obj === null;
}

/**
 * get attributes for a tag
 *
 * @param {String} html
 * @return {Object}
 *   - {String} html
 *   - {Boolean} closing
 */
function getAttrs(html) {
  var i = _.spaceIndex(html);
  if (i === -1) {
    return {
      html: "",
      closing: html[html.length - 2] === "/",
    };
  }
  html = _.trim(html.slice(i + 1, -1));
  var isClosing = html[html.length - 1] === "/";
  if (isClosing) html = _.trim(html.slice(0, -1));
  return {
    html: html,
    closing: isClosing,
  };
}

/**
 * shallow copy
 *
 * @param {Object} obj
 * @return {Object}
 */
function shallowCopyObject(obj) {
  var ret = {};
  for (var i in obj) {
    ret[i] = obj[i];
  }
  return ret;
}

function keysToLowerCase(obj) {
  var ret = {};
  for (var i in obj) {
    if (Array.isArray(obj[i])) {
      ret[i.toLowerCase()] = obj[i].map(function (item) {
        return item.toLowerCase();
      });
    } else {
      ret[i.toLowerCase()] = obj[i];
    }
  }
  return ret;
}

/**
 * FilterXSS class
 *
 * @param {Object} options
 *        whiteList (or allowList), onTag, onTagAttr, onIgnoreTag,
 *        onIgnoreTagAttr, safeAttrValue, escapeHtml
 *        stripIgnoreTagBody, allowCommentTag, stripBlankChar
 *        css{whiteList, onAttr, onIgnoreAttr} `css=false` means don't use `cssfilter`
 */
function FilterXSS(options) {
  options = shallowCopyObject(options || {});

  if (options.stripIgnoreTag) {
    if (options.onIgnoreTag) {
      console.error(
        'Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time'
      );
    }
    options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;
  }
  if (options.whiteList || options.allowList) {
    options.whiteList = keysToLowerCase(options.whiteList || options.allowList);
  } else {
    options.whiteList = DEFAULT.whiteList;
  }

  options.onTag = options.onTag || DEFAULT.onTag;
  options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
  options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
  options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
  options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
  options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
  this.options = options;

  if (options.css === false) {
    this.cssFilter = false;
  } else {
    options.css = options.css || {};
    this.cssFilter = new FilterCSS(options.css);
  }
}

/**
 * start process and returns result
 *
 * @param {String} html
 * @return {String}
 */
FilterXSS.prototype.process = function (html) {
  // compatible with the input
  html = html || "";
  html = html.toString();
  if (!html) return "";

  var me = this;
  var options = me.options;
  var whiteList = options.whiteList;
  var onTag = options.onTag;
  var onIgnoreTag = options.onIgnoreTag;
  var onTagAttr = options.onTagAttr;
  var onIgnoreTagAttr = options.onIgnoreTagAttr;
  var safeAttrValue = options.safeAttrValue;
  var escapeHtml = options.escapeHtml;
  var cssFilter = me.cssFilter;

  // remove invisible characters
  if (options.stripBlankChar) {
    html = DEFAULT.stripBlankChar(html);
  }

  // remove html comments
  if (!options.allowCommentTag) {
    html = DEFAULT.stripCommentTag(html);
  }

  // if enable stripIgnoreTagBody
  var stripIgnoreTagBody = false;
  if (options.stripIgnoreTagBody) {
    stripIgnoreTagBody = DEFAULT.StripTagBody(
      options.stripIgnoreTagBody,
      onIgnoreTag
    );
    onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;
  }

  var retHtml = parseTag(
    html,
    function (sourcePosition, position, tag, html, isClosing) {
      var info = {
        sourcePosition: sourcePosition,
        position: position,
        isClosing: isClosing,
        isWhite: Object.prototype.hasOwnProperty.call(whiteList, tag),
      };

      // call `onTag()`
      var ret = onTag(tag, html, info);
      if (!isNull(ret)) return ret;

      if (info.isWhite) {
        if (info.isClosing) {
          return "</" + tag + ">";
        }

        var attrs = getAttrs(html);
        var whiteAttrList = whiteList[tag];
        var attrsHtml = parseAttr(attrs.html, function (name, value) {
          // call `onTagAttr()`
          var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
          var ret = onTagAttr(tag, name, value, isWhiteAttr);
          if (!isNull(ret)) return ret;

          if (isWhiteAttr) {
            // call `safeAttrValue()`
            value = safeAttrValue(tag, name, value, cssFilter);
            if (value) {
              return name + '="' + value + '"';
            } else {
              return name;
            }
          } else {
            // call `onIgnoreTagAttr()`
            ret = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
            if (!isNull(ret)) return ret;
            return;
          }
        });

        // build new tag html
        html = "<" + tag;
        if (attrsHtml) html += " " + attrsHtml;
        if (attrs.closing) html += " /";
        html += ">";
        return html;
      } else {
        // call `onIgnoreTag()`
        ret = onIgnoreTag(tag, html, info);
        if (!isNull(ret)) return ret;
        return escapeHtml(html);
      }
    },
    escapeHtml
  );

  // if enable stripIgnoreTagBody
  if (stripIgnoreTagBody) {
    retHtml = stripIgnoreTagBody.remove(retHtml);
  }

  return retHtml;
};

module.exports = FilterXSS;

},{"./default":15,"./parser":17,"./util":18,"cssfilter":11}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
